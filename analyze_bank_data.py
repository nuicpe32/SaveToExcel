#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
"""

import zipfile
import xml.etree.ElementTree as ET
from collections import defaultdict

def read_excel_data():
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel"""
    filename = "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡πâ‡∏≤.xlsx"
    
    try:
        with zipfile.ZipFile(filename, 'r') as zip_file:
            # ‡∏≠‡πà‡∏≤‡∏ô shared strings
            shared_strings = []
            try:
                with zip_file.open('xl/sharedStrings.xml') as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                    for si in root.findall('.//ss:si', ns):
                        t = si.find('.//ss:t', ns)
                        if t is not None:
                            shared_strings.append(t.text or '')
                        else:
                            shared_strings.append('')
            except:
                pass
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å worksheet
            with zip_file.open('xl/worksheets/sheet1.xml') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                
                rows_data = []
                for row in root.findall('.//ss:row', ns):
                    row_data = []
                    for cell in row.findall('.//ss:c', ns):
                        value = ""
                        t_attr = cell.get('t')
                        v_elem = cell.find('.//ss:v', ns)
                        
                        if v_elem is not None:
                            if t_attr == 's':
                                try:
                                    idx = int(v_elem.text)
                                    if idx < len(shared_strings):
                                        value = shared_strings[idx]
                                except:
                                    value = v_elem.text or ""
                            else:
                                value = v_elem.text or ""
                        
                        row_data.append(value)
                    
                    if row_data:
                        rows_data.append(row_data)
                
                if rows_data:
                    headers = rows_data[0]
                    data_rows = rows_data[1:]
                    return headers, data_rows
        
        return None, None
    except Exception as e:
        print(f"Error: {e}")
        return None, None

def analyze_bank_data():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"""
    headers, rows = read_excel_data()
    
    if not headers or not rows:
        print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    bank_branch_col = -1
    bank_name_col = -1
    address_col = -1
    soi_col = -1
    moo_col = -1
    tambon_col = -1
    amphoe_col = -1
    road_col = -1
    province_col = -1
    postal_col = -1
    
    for i, header in enumerate(headers):
        if '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤' in header:
            bank_branch_col = i
        elif '‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' in header:
            bank_name_col = i
        elif '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' in header:
            address_col = i
        elif '‡∏ã‡∏≠‡∏¢' in header:
            soi_col = i
        elif '‡∏´‡∏°‡∏π‡πà' in header:
            moo_col = i
        elif '‡∏ï‡∏≥‡∏ö‡∏•' in header or '‡πÅ‡∏Ç‡∏ß‡∏á' in header:
            tambon_col = i
        elif '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠' in header or '‡πÄ‡∏Ç‡∏ï' in header:
            amphoe_col = i
        elif '‡∏ñ‡∏ô‡∏ô' in header:
            road_col = i
        elif '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' in header:
            province_col = i
        elif '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ' in header:
            postal_col = i
    
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
    bank_branches = set()
    bank_names = set()
    bank_address_map = {}
    
    for row in rows:
        if len(row) > max(bank_branch_col, bank_name_col, address_col):
            bank_branch = row[bank_branch_col] if bank_branch_col >= 0 else ""
            bank_name = row[bank_name_col] if bank_name_col >= 0 else ""
            
            if bank_branch and bank_branch.strip():
                bank_branches.add(bank_branch.strip())
            if bank_name and bank_name.strip():
                bank_names.add(bank_name.strip())
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            if bank_branch and bank_name:
                key = f"{bank_branch}|{bank_name}"
                
                address_data = {}
                if address_col >= 0 and len(row) > address_col:
                    address_data['address'] = row[address_col] or ""
                if soi_col >= 0 and len(row) > soi_col:
                    address_data['soi'] = row[soi_col] or ""
                if moo_col >= 0 and len(row) > moo_col:
                    address_data['moo'] = row[moo_col] or ""
                if tambon_col >= 0 and len(row) > tambon_col:
                    address_data['tambon'] = row[tambon_col] or ""
                if amphoe_col >= 0 and len(row) > amphoe_col:
                    address_data['amphoe'] = row[amphoe_col] or ""
                if road_col >= 0 and len(row) > road_col:
                    address_data['road'] = row[road_col] or ""
                if province_col >= 0 and len(row) > province_col:
                    address_data['province'] = row[province_col] or ""
                if postal_col >= 0 and len(row) > postal_col:
                    address_data['postal'] = row[postal_col] or ""
                
                bank_address_map[key] = address_data
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    print("="*80)
    print("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°")
    print("="*80)
    
    print(f"\nüè¶ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤ ({len(bank_branches)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):")
    for i, branch in enumerate(sorted(bank_branches), 1):
        print(f"  {i:2d}. {branch}")
    
    print(f"\nüèõÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ({len(bank_names)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):")
    for i, name in enumerate(sorted(bank_names), 1):
        print(f"  {i:2d}. {name}")
    
    print(f"\nüìç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ mapping ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å):")
    count = 0
    for key, addr in bank_address_map.items():
        if count >= 5:
            break
        bank_branch, bank_name = key.split('|')
        print(f"\n  üîπ {bank_branch} | {bank_name}")
        print(f"     ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {addr.get('address', '')}")
        print(f"     ‡∏ñ‡∏ô‡∏ô: {addr.get('road', '')}")
        print(f"     ‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á: {addr.get('tambon', '')}")
        print(f"     ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï: {addr.get('amphoe', '')}")
        print(f"     ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {addr.get('province', '')}")
        print(f"     ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ: {addr.get('postal', '')}")
        count += 1
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
    import json
    
    bank_data = {
        'bank_branches': sorted(list(bank_branches)),
        'bank_names': sorted(list(bank_names)),
        'address_mapping': bank_address_map
    }
    
    with open('bank_data.json', 'w', encoding='utf-8') as f:
        json.dump(bank_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå bank_data.json ‡πÅ‡∏•‡πâ‡∏ß")
    print(f"üìä ‡∏™‡∏£‡∏∏‡∏õ: {len(bank_branches)} ‡∏™‡∏≤‡∏Ç‡∏≤, {len(bank_names)} ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, {len(bank_address_map)} ‡∏Å‡∏≤‡∏£ mapping")

if __name__ == "__main__":
    analyze_bank_data()