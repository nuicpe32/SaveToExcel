#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е
"""

def test_column_filtering():
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕З"""
    print("="*80)
    print("ЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е")
    print("="*80)
    
    # р╕Ир╕│р╕ер╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М Excel
    all_columns = [
        'р╕ер╕│р╕Фр╕▒р╕Ъ', 'р╣Ар╕ер╕Вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н', 'р╕зр╕▒р╕Щ', 'р╣Ар╕Фр╕╖р╕нр╕Щ ', 'р╕Ыр╕╡ ', 'р╕Шр╕Щр╕▓р╕Др╕▓р╕гр╕кр╕▓р╕Вр╕▓',
        'р╕Ьр╕╣р╣Йр╣Ар╕кр╕╡р╕вр╕лр╕▓р╕в', 'р╣Ар╕Др╕кр╣Др╕нр╕Фр╕╡', 'р╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╕бр╣Йр╕▓', 'р╕Кр╕╖р╣Ир╕нр╕Шр╕Щр╕▓р╕Др╕▓р╕г', 'р╣Ар╕ер╕Вр╕Ър╕▒р╕Нр╕Кр╕╡',
        'р╕Кр╕╖р╣Ир╕нр╕Ър╕▒р╕Нр╕Кр╕╡', 'р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓', 'р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Шр╕Щр╕▓р╕Др╕▓р╕г', 'р╕Лр╕нр╕в', 'р╕лр╕бр╕╣р╣И', 'р╕Хр╕│р╕Ър╕е/р╣Бр╕Вр╕зр╕З',
        'р╕нр╕│р╣Ар╕ар╕н/р╣Ар╕Вр╕Х', 'р╕Цр╕Щр╕Щ', 'р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Ф', 'р╕гр╕лр╕▒р╕кр╣Др╕Ыр╕гр╕йр╕Ур╕╡р╕вр╣М', 'р╕зр╕▒р╕Щр╕Щр╕▒р╕Фр╕кр╣Ир╕З', 'р╣Ар╕Фр╕╖р╕нр╕Щр╕кр╣Ир╕З ', 'р╣Ар╕зр╕ер╕▓р╕кр╣Ир╕З',
        'english_field_1', 'empty_column', 'unused_data', 'field_no_data'  # р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
    ]
    
    # р╕Ир╕│р╕ер╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З
    sample_data = [
        ['272', '9999', '2', 'р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б', '2568', 'р╕Бр╕гр╕╕р╕Зр╣Др╕Чр╕в р╕кр╕│р╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╣Гр╕лр╕Нр╣И',
         'р╕Щр╕▓р╕вр╕Чр╕Фр╕кр╕нр╕Ъ', 'TEST001', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Чр╕Фр╕кр╕нр╕Ъ', 'р╕Бр╕гр╕╕р╕Зр╣Др╕Чр╕в', '1234567890',
         'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Чр╕Фр╕кр╕нр╕Ъ', '1-31 р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б 2568', '333', '-', '-', 'р╕кр╕▓р╕бр╣Ар╕кр╕Щр╣Гр╕Щ',
         'р╕Юр╕Нр╕▓р╣Др╕Ч', 'р╕Юр╕лр╕ер╣Вр╕вр╕Шр╕┤р╕Щ', 'р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г', '10400', '3', 'р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б', '09.00 р╕Щ.',
         '', '', '', ''],  # р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в 4 р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕зр╣Ир╕▓р╕Зр╣Ар╕Ыр╕ер╣Ир╕▓
        ['273', '10000', '2', 'р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б', '2568', 'р╕Бр╕кр╕┤р╕Бр╕гр╣Др╕Чр╕в р╕кр╕│р╕Щр╕▒р╕Бр╕Зр╕▓р╕Щр╣Гр╕лр╕Нр╣И',
         'р╕Щр╕▓р╕вр╕Чр╕Фр╕кр╕нр╕Ъ 2', 'TEST002', 'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Чр╕Фр╕кр╕нр╕Ъ 2', 'р╕Бр╕кр╕┤р╕Бр╕гр╣Др╕Чр╕в', '9876543210',
         'р╕Щр╕▓р╕Зр╕кр╕▓р╕зр╕Чр╕Фр╕кр╕нр╕Ъ 2', '1-31 р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б 2568', '400/22', '-', '-', 'р╕кр╕▓р╕бр╣Ар╕кр╕Щр╣Гр╕Щ',
         'р╕Юр╕Нр╕▓р╣Др╕Ч', 'р╕Юр╕лр╕ер╣Вр╕вр╕Шр╕┤р╕Щ', 'р╕Бр╕гр╕╕р╕Зр╣Ар╕Чр╕Юр╕бр╕лр╕▓р╕Щр╕Др╕г', '10400', '3', 'р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б', '09.00 р╕Щ.',
         '', '', '', '']  # р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в 4 р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕зр╣Ир╕▓р╕Зр╣Ар╕Ыр╕ер╣Ир╕▓
    ]
    
    print(f"ЁЯУК р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щр╣Др╕Яр╕ер╣М Excel:")
    print(f"   - р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {len(all_columns)}")
    for i, col in enumerate(all_columns, 1):
        if i <= 24:  # р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Др╕Чр╕вр╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е
            print(f"     {i:2d}. {col} тЬЕ")
        else:  # р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕нр╕▒р╕Зр╕Бр╕др╕йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е
            print(f"     {i:2d}. {col} тЭМ (р╣Др╕бр╣Ир╕Др╕зр╕гр╣Бр╕кр╕Фр╕З)")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕З
    print(f"\nЁЯФз р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣М:")
    
    try:
        # р╕кр╕гр╣Йр╕▓р╕З class р╕Ир╕│р╕ер╕нр╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ
        class MockExcelManager:
            def is_thai_column(self, column_name):
                """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Кр╕╖р╣Ир╕нр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕лр╕гр╕╖р╕нр╣Др╕бр╣И"""
                if not column_name or not isinstance(column_name, str):
                    return False
                
                thai_columns = [
                    'р╕ер╕│р╕Фр╕▒р╕Ъ', 'р╣Ар╕ер╕Вр╕лр╕Щр╕▒р╕Зр╕кр╕╖р╕н', 'р╕зр╕▒р╕Щ', 'р╣Ар╕Фр╕╖р╕нр╕Щ', 'р╕Ыр╕╡', 'р╕Шр╕Щр╕▓р╕Др╕▓р╕гр╕кр╕▓р╕Вр╕▓',
                    'р╕Ьр╕╣р╣Йр╣Ар╕кр╕╡р╕вр╕лр╕▓р╕в', 'р╣Ар╕Др╕кр╣Др╕нр╕Фр╕╡', 'р╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Ър╕▒р╕Нр╕Кр╕╡р╕бр╣Йр╕▓', 'р╕Кр╕╖р╣Ир╕нр╕Шр╕Щр╕▓р╕Др╕▓р╕г', 'р╣Ар╕ер╕Вр╕Ър╕▒р╕Нр╕Кр╕╡',
                    'р╕Кр╕╖р╣Ир╕нр╕Ър╕▒р╕Нр╕Кр╕╡', 'р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓', 'р╕Чр╕╡р╣Ир╕нр╕вр╕╣р╣Ир╕Шр╕Щр╕▓р╕Др╕▓р╕г', 'р╕Лр╕нр╕в', 'р╕лр╕бр╕╣р╣И', 'р╕Хр╕│р╕Ър╕е/р╣Бр╕Вр╕зр╕З',
                    'р╕нр╕│р╣Ар╕ар╕н/р╣Ар╕Вр╕Х', 'р╕Цр╕Щр╕Щ', 'р╕Ир╕▒р╕Зр╕лр╕зр╕▒р╕Ф', 'р╕гр╕лр╕▒р╕кр╣Др╕Ыр╕гр╕йр╕Ур╕╡р╕вр╣М', 'р╕зр╕▒р╕Щр╕Щр╕▒р╕Фр╕кр╣Ир╕З', 'р╣Ар╕Фр╕╖р╕нр╕Щр╕кр╣Ир╕З', 'р╣Ар╕зр╕ер╕▓р╕кр╣Ир╕З'
                ]
                
                column_clean = column_name.strip()
                for thai_col in thai_columns:
                    if thai_col in column_clean:
                        return True
                return False
            
            def column_has_data(self, column_index, data_rows):
                """р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕лр╕гр╕╖р╕нр╣Др╕бр╣И"""
                if not data_rows or column_index < 0:
                    return False
                
                sample_size = min(5, len(data_rows))
                for i, row in enumerate(data_rows[:sample_size]):
                    if column_index < len(row):
                        value = str(row[column_index]).strip()
                        if value and value != '' and value.lower() != 'nan' and value != 'None':
                            return True
                return False
            
            def filter_display_columns(self, columns, data_rows):
                """р╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕кр╕Фр╕З"""
                if not columns:
                    return []
                
                display_columns = []
                for i, col in enumerate(columns):
                    is_thai_column = self.is_thai_column(col)
                    has_data = self.column_has_data(i, data_rows)
                    
                    if is_thai_column and has_data:
                        display_columns.append(col)
                
                return display_columns
        
        # р╕Чр╕Фр╕кр╕нр╕Ъ
        manager = MockExcelManager()
        filtered_columns = manager.filter_display_columns(all_columns, sample_data)
        
        print(f"   ЁЯУЛ р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╕Ир╕░р╣Бр╕кр╕Фр╕Зр╕лр╕ер╕▒р╕Зр╕Бр╕гр╕нр╕З:")
        print(f"   - р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕З: {len(filtered_columns)}")
        for i, col in enumerate(filtered_columns, 1):
            print(f"     {i:2d}. {col}")
        
        print(f"\n   ЁЯЧСя╕П р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Лр╣Ир╕нр╕Щ:")
        hidden_columns = [col for col in all_columns if col not in filtered_columns]
        print(f"   - р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╕Лр╣Ир╕нр╕Щ: {len(hidden_columns)}")
        for i, col in enumerate(hidden_columns, 1):
            print(f"     {i:2d}. {col}")
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
        expected_hidden = ['english_field_1', 'empty_column', 'unused_data', 'field_no_data']
        success = all(col in hidden_columns for col in expected_hidden)
        
        print(f"\n   {'тЬЕ' if success else 'тЭМ'} р╕Бр╕▓р╕гр╕Бр╕гр╕нр╕З: {'р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З' if success else 'р╕вр╕▒р╕Зр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓'}")
        
        return success
        
    except Exception as e:
        print(f"   тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")
        return False

def test_interface_improvement():
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е"""
    print(f"\nЁЯЦея╕П р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е:")
    
    improvements = [
        "р╕Лр╣Ир╕нр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ",
        "р╕Лр╣Ир╕нр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е",
        "р╣Бр╕кр╕Фр╕Зр╣Ар╕Йр╕Юр╕▓р╕░р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е",
        "р╕ер╕Фр╕Др╕зр╕▓р╕бр╕вр╕╕р╣Ир╕Зр╣Ар╕лр╕вр╕┤р╕Зр╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕Зр╣Бр╕кр╕Фр╕Зр╕Ьр╕е",
        "р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ыр╕гр╕░р╕кр╕Ър╕Бр╕▓р╕гр╕Ур╣Мр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
    ]
    
    print(f"   ЁЯУК р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Чр╕╡р╣Ир╕Чр╕│:")
    for i, improvement in enumerate(improvements, 1):
        print(f"     {i}. {improvement} тЬЕ")
    
    print(f"\n   тЬЕ р╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Зр╣Ир╕▓р╕вр╕Вр╕╢р╣Йр╕Щ")
    return True

def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б"""
    print("ЁЯзк р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е")
    
    test1 = test_column_filtering()
    test2 = test_interface_improvement()
    
    print("\n" + "="*80)
    print("ЁЯУЭ р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ")
    print("="*80)
    
    results = [
        ("ЁЯФН р╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣М", test1),
        ("ЁЯЦея╕П р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕лр╕Щр╣Йр╕▓р╕Ир╕н", test2)
    ]
    
    all_passed = True
    for test_name, result in results:
        status = "тЬЕ р╕Ьр╣Ир╕▓р╕Щ" if result else "тЭМ р╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ"
        print(f"   {test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "="*80)
    if all_passed:
        print("ЁЯОЙ р╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╣Ар╕кр╕гр╣Зр╕Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М!")
        print("\nтЬЕ р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М:")
        print("   тАв р╕Лр╣Ир╕нр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        print("   тАв р╕Лр╣Ир╕нр╕Щр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е")
        print("   тАв р╣Бр╕кр╕Фр╕Зр╣Ар╕Йр╕Юр╕▓р╕░р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕вр╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е")
        print("   тАв р╕Хр╕▓р╕гр╕▓р╕Зр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Зр╣Ир╕▓р╕вр╕Вр╕╢р╣Йр╕Щ")
        
        print(f"\nЁЯЪА р╕лр╕Щр╣Йр╕▓р╕Ир╕нр╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ:")
        print(f"   1. р╣Ар╕Ыр╕┤р╕Фр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б: python3 simple_excel_manager.py")
        print(f"   2. р╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕Чр╣Зр╕Ъ 'ЁЯУК р╕Фр╕╣р╕Вр╣Йр╕нр╕бр╕╣р╕е'")
        print(f"   3. р╕Ир╕░р╣Ар╕лр╣Зр╕Щр╣Ар╕Йр╕Юр╕▓р╕░р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╣Др╕Чр╕в")
        print(f"   4. р╣Др╕бр╣Ир╕бр╕╡р╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕йр╕лр╕гр╕╖р╕нр╕Др╕нр╕ер╕▒р╕бр╕Щр╣Мр╕зр╣Ир╕▓р╕Зр╣Ар╕Ыр╕ер╣Ир╕▓")
    else:
        print("тЪая╕П р╕вр╕▒р╕Зр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓р╣Гр╕Щр╕Бр╕▓р╕гр╕Бр╕гр╕нр╕Зр╕Др╕нр╕ер╕▒р╕бр╕Щр╣М")

if __name__ == "__main__":
    main()