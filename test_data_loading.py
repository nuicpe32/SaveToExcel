#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
"""

import os
import sys
import zipfile
import xml.etree.ElementTree as ET

def read_excel_direct(filename):
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    try:
        with zipfile.ZipFile(filename, 'r') as zip_file:
            # ‡∏≠‡πà‡∏≤‡∏ô shared strings
            shared_strings = []
            try:
                with zip_file.open('xl/sharedStrings.xml') as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    
                    ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                    
                    for si in root.findall('.//ss:si', ns):
                        t = si.find('.//ss:t', ns)
                        if t is not None:
                            shared_strings.append(t.text or '')
                        else:
                            shared_strings.append('')
            except:
                pass
            
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å worksheet
            with zip_file.open('xl/worksheets/sheet1.xml') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                
                ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                
                rows_data = []
                for row in root.findall('.//ss:row', ns):
                    row_data = []
                    for cell in row.findall('.//ss:c', ns):
                        value = ""
                        
                        t_attr = cell.get('t')
                        v_elem = cell.find('.//ss:v', ns)
                        
                        if v_elem is not None:
                            if t_attr == 's':  # shared string
                                try:
                                    idx = int(v_elem.text)
                                    if idx < len(shared_strings):
                                        value = shared_strings[idx]
                                except:
                                    value = v_elem.text or ""
                            else:
                                value = v_elem.text or ""
                        
                        row_data.append(value)
                    
                    if row_data:
                        rows_data.append(row_data)
                
                if rows_data:
                    headers = rows_data[0] if rows_data else []
                    data_rows = rows_data[1:] if len(rows_data) > 1 else []
                    return headers, data_rows
        
        return None, None
    except Exception as e:
        print(f"Error reading Excel directly: {e}")
        return None, None

def test_simple_data_display():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
    filename = "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡πâ‡∏≤.xlsx"
    
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI ===")
    
    if not os.path.exists(filename):
        print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}")
        return
    
    headers, rows = read_excel_direct(filename)
    
    if headers and rows:
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(headers)}")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(rows)}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ 10 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
        print("\nüìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (10 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å):")
        for i, header in enumerate(headers[:10], 1):
            print(f"   {i:2d}. {header}")
        
        if len(headers) > 10:
            print(f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(headers) - 10} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
        print(f"\nüìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (3 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å):")
        key_columns = [0, 1, 6, 9, 10, 11]  # ‡∏•‡∏≥‡∏î‡∏±‡∏ö, ‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠, ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢, ‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ, ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        
        for col_idx in key_columns:
            if col_idx < len(headers):
                print(f"   {headers[col_idx]:<20}", end=" | ")
        print()
        print("   " + "-" * 100)
        
        for i, row in enumerate(rows[:3], 1):
            print(f"{i:2d}:", end=" ")
            for col_idx in key_columns:
                if col_idx < len(row):
                    value = str(row[col_idx])[:18]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                    print(f"{value:<20}", end=" | ")
            print()
        
        print(f"\n‚ú® ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô GUI")
        return True
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return False

if __name__ == "__main__":
    test_simple_data_display()