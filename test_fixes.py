#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import zipfile
import xml.etree.ElementTree as ET
from datetime import datetime

def test_order_number_generation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
    print("="*80)
    print("üî¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("="*80)
    
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
        with zipfile.ZipFile('‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡πâ‡∏≤.xlsx', 'r') as zip_file:
            shared_strings = []
            try:
                with zip_file.open('xl/sharedStrings.xml') as f:
                    tree = ET.parse(f)
                    root = tree.getroot()
                    ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                    for si in root.findall('.//ss:si', ns):
                        t = si.find('.//ss:t', ns)
                        if t is not None:
                            shared_strings.append(t.text or '')
                        else:
                            shared_strings.append('')
            except:
                pass
            
            with zip_file.open('xl/worksheets/sheet1.xml') as f:
                tree = ET.parse(f)
                root = tree.getroot()
                ns = {'ss': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'}
                
                rows_data = []
                for row in root.findall('.//ss:row', ns):
                    row_data = []
                    for cell in row.findall('.//ss:c', ns):
                        value = ''
                        t_attr = cell.get('t')
                        v_elem = cell.find('.//ss:v', ns)
                        
                        if v_elem is not None:
                            if t_attr == 's':
                                try:
                                    idx = int(v_elem.text)
                                    if idx < len(shared_strings):
                                        value = shared_strings[idx]
                                except:
                                    value = v_elem.text or ''
                            else:
                                value = v_elem.text or ''
                        
                        row_data.append(value)
                    
                    if row_data:
                        rows_data.append(row_data)
                
                if rows_data:
                    headers = rows_data[0]
                    data_rows = rows_data[1:]
                    
                    # ‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                    max_order = 0
                    valid_orders = []
                    
                    for i, row in enumerate(data_rows):
                        if row and len(row) > 0:
                            try:
                                order_num = int(str(row[0]).strip())
                                valid_orders.append(order_num)
                                if order_num > max_order:
                                    max_order = order_num
                            except:
                                pass
                    
                    next_order = max_order + 1
                    
                    print(f"üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏≥‡∏î‡∏±‡∏ö:")
                    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(data_rows)}")
                    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {len(valid_orders)}")
                    print(f"   - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö: {max_order}")
                    print(f"   - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ: {next_order}")
                    
                    print(f"\nüîπ ‡∏•‡∏≥‡∏î‡∏±‡∏ö 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:")
                    for order in sorted(valid_orders)[-5:]:
                        print(f"   - {order}")
                    
                    print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_date_formatting():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
    print(f"\nüìÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    print("="*50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢
    now = datetime.now()
    thai_months = {
        1: "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", 2: "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", 3: "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", 4: "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
        5: "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", 6: "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", 7: "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", 8: "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
        9: "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", 10: "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", 11: "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", 12: "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    }
    
    current_day = str(now.day)
    current_month = thai_months[now.month]
    current_year = str(now.year + 543)  # ‡∏û.‡∏®.
    
    print(f"üìä ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
    print(f"   - ‡∏ß‡∏±‡∏ô: {current_day}")
    print(f"   - ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {current_month}")
    print(f"   - ‡∏õ‡∏µ: {current_year}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    print(f"\nüîπ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°:")
    print(f"   - ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå)")
    print(f"   - ‡∏õ‡∏µ: 2567 (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå)")
    print(f"   - ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á: ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå)")
    
    print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    return True

def test_column_mapping():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"""
    print(f"\nüìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
    print("="*50)
    
    # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á (‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
    actual_headers = [
        '‡∏•‡∏≥‡∏î‡∏±‡∏ö', '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', '‡∏ß‡∏±‡∏ô', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ', '‡∏õ‡∏µ ', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤',
        '‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢', '‡πÄ‡∏Ñ‡∏™‡πÑ‡∏≠‡∏î‡∏µ', '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡πâ‡∏≤', '‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤', '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', '‡∏ã‡∏≠‡∏¢', '‡∏´‡∏°‡∏π‡πà', '‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á',
        '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï', '‡∏ñ‡∏ô‡∏ô', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ', '‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á ', '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á'
    ]
    
    # ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    column_mapping = {
        'order_no': '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
        'document_no': '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
        'day': '‡∏ß‡∏±‡∏ô',
        'month': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ',  # ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        'year': '‡∏õ‡∏µ ',      # ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        'bank_branch': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤',
        'victim': '‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
        'case_id': '‡πÄ‡∏Ñ‡∏™‡πÑ‡∏≠‡∏î‡∏µ',
        'account_owner_horse': '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡πâ‡∏≤',
        'bank_name': '‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
        'account_no': '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        'account_name': '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
        'time_period': '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
        'bank_address': '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
        'soi': '‡∏ã‡∏≠‡∏¢',
        'moo': '‡∏´‡∏°‡∏π‡πà',
        'tambon_khwaeng': '‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á',
        'amphoe_khet': '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï',
        'road': '‡∏ñ‡∏ô‡∏ô',
        'province': '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
        'postal_code': '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ',
        'delivery_day': '‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏™‡πà‡∏á',
        'delivery_month': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á ',  # ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        'delivery_time': '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á'
    }
    
    print(f"üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {len(actual_headers)}")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û: {len(column_mapping)}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    missing_mappings = []
    correct_mappings = []
    
    for form_field, excel_col in column_mapping.items():
        if excel_col in actual_headers:
            correct_mappings.append((form_field, excel_col))
        else:
            missing_mappings.append((form_field, excel_col))
    
    print(f"\nüîπ ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {len(correct_mappings)}/{len(column_mapping)}")
    
    if missing_mappings:
        print(f"\n‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î:")
        for form_field, excel_col in missing_mappings:
            print(f"   - {form_field} ‚Üí '{excel_col}' (‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå)")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    important_fields = ['month', 'year', 'delivery_month']
    print(f"\nüîπ ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    for field in important_fields:
        if field in column_mapping:
            excel_col = column_mapping[field]
            status = "‚úÖ" if excel_col in actual_headers else "‚ùå"
            print(f"   {status} {field} ‚Üí '{excel_col}'")
    
    success = len(missing_mappings) == 0
    print(f"\n{'‚úÖ' if success else '‚ùå'} ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {'‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' if success else '‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}")
    return success

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    test1 = test_order_number_generation()
    test2 = test_date_formatting()
    test3 = test_column_mapping()
    
    print("\n" + "="*80)
    print("üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("="*80)
    
    results = [
        ("üî¢ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", test1),
        ("üìÖ ‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", test2),
        ("üìã ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå", test3)
    ]
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô" if result else "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        print(f"   {test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "="*80)
    if all_passed:
        print("üéâ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
        print("\n‚úÖ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß:")
        print("   ‚Ä¢ ‡∏•‡∏≥‡∏î‡∏±‡∏ö - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤")
        print("   ‚Ä¢ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ - ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        print("   ‚Ä¢ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡πà‡∏á - ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°")
        print("   ‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏û‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå - ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á")
        
        print(f"\nüöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print(f"   1. python3 install_dependencies.py")
        print(f"   2. python3 simple_excel_manager.py")
        print(f"   3. ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 271 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        print(f"   4. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        print("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")

if __name__ == "__main__":
    main()