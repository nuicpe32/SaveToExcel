#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API Endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Email Tracking (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
"""

from fastapi import APIRouter, Depends, Response
from fastapi.responses import StreamingResponse
from sqlalchemy.orm import Session
from datetime import datetime
import io

from app.core.database import get_db
from app.models.email_log import EmailLog

router = APIRouter()

# Tracking pixel (1x1 transparent GIF)
TRACKING_PIXEL = bytes.fromhex('47494638396101000100800000000000ffffff21f90401000000002c00000000010001000002024401003b')

@router.get("/track/{email_log_id}.gif")
async def track_email_open(
    email_log_id: int,
    db: Session = Depends(get_db)
):
    """
    Email tracking endpoint - ‡πÉ‡∏ä‡πâ tracking pixel (1x1 transparent GIF)
    
    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå email client ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    
    Usage in HTML email:
    <img src="http://backend-url/api/v1/email-tracking/track/{email_log_id}.gif" width="1" height="1" />
    """
    try:
        # ‡∏´‡∏≤ email log
        email_log = db.query(EmailLog).filter(EmailLog.id == email_log_id).first()
        
        if email_log:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï opened count ‡πÅ‡∏•‡∏∞ timestamp
            email_log.opened_count = (email_log.opened_count or 0) + 1
            email_log.opened_at = datetime.now()
            
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å opened_at
            if email_log.opened_count == 1:
                email_log.opened_at = datetime.now()
            
            db.commit()
            
            print(f"üìß Email opened: log_id={email_log_id}, count={email_log.opened_count}")
        
        # Return tracking pixel (1x1 transparent GIF)
        return StreamingResponse(
            io.BytesIO(TRACKING_PIXEL),
            media_type="image/gif",
            headers={
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )
        
    except Exception as e:
        print(f"Error in email tracking: {e}")
        # ‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡∏Å‡πá‡∏™‡πà‡∏á pixel ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ email client ‡πÅ‡∏™‡∏î‡∏á broken image
        return StreamingResponse(
            io.BytesIO(TRACKING_PIXEL),
            media_type="image/gif"
        )

@router.get("/track-link/{email_log_id}/{link_id}")
async def track_link_click(
    email_log_id: int,
    link_id: str,
    db: Session = Depends(get_db)
):
    """
    Link tracking endpoint - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å link ‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå
    
    Note: ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ)
    """
    try:
        email_log = db.query(EmailLog).filter(EmailLog.id == email_log_id).first()
        
        if email_log:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å link
            # TODO: ‡∏™‡∏£‡πâ‡∏≤‡∏á table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å link clicks
            print(f"üîó Link clicked: email_log_id={email_log_id}, link_id={link_id}")
        
        # Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
        return {"message": "Link tracking recorded"}
        
    except Exception as e:
        print(f"Error in link tracking: {e}")
        return {"message": "Error"}

