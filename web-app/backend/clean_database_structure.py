#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Clean database structure by removing redundant columns
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import text
from app.core.database import engine

def clean_database_structure():
    """Clean database structure by removing redundant columns"""
    print("=" * 80)
    print("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    print("=" * 80)
    
    try:
        with engine.connect() as conn:
            # 1. Move data from redundant columns to criminal_cases before dropping
            print("\n1. ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á criminal_cases...")
            
            # Move victim_name from bank_accounts to criminal_cases
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ victim_name ‡∏à‡∏≤‡∏Å bank_accounts...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET victim_name = ba.victim_name
                FROM bank_accounts ba 
                WHERE criminal_cases.id = ba.criminal_case_id 
                AND criminal_cases.victim_name IS NULL 
                AND ba.victim_name IS NOT NULL
            """))
            
            # Move victim_name from suspects to criminal_cases
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ victim_name ‡∏à‡∏≤‡∏Å suspects...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET victim_name = s.victim_name
                FROM suspects s 
                WHERE criminal_cases.id = s.criminal_case_id 
                AND criminal_cases.victim_name IS NULL 
                AND s.victim_name IS NOT NULL
            """))
            
            # Move case_number from post_arrests to criminal_cases (if needed)
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ case_number ‡∏à‡∏≤‡∏Å post_arrests...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET case_number = pa.case_number
                FROM post_arrests pa 
                WHERE criminal_cases.id = pa.criminal_case_id 
                AND criminal_cases.case_number IS NULL 
                AND pa.case_number IS NOT NULL
            """))
            
            # Move accuser_name from post_arrests to criminal_cases
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ accuser_name ‡∏à‡∏≤‡∏Å post_arrests...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET complainant = pa.accuser_name
                FROM post_arrests pa 
                WHERE criminal_cases.id = pa.criminal_case_id 
                AND criminal_cases.complainant IS NULL 
                AND pa.accuser_name IS NOT NULL
            """))
            
            # Move crime_scene from post_arrests to criminal_cases
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ crime_scene ‡∏à‡∏≤‡∏Å post_arrests...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET case_scene = pa.crime_scene
                FROM post_arrests pa 
                WHERE criminal_cases.id = pa.criminal_case_id 
                AND criminal_cases.case_scene IS NULL 
                AND pa.crime_scene IS NOT NULL
            """))
            
            # Move damage_amount from post_arrests to criminal_cases
            print("   üìã ‡∏¢‡πâ‡∏≤‡∏¢ damage_amount ‡∏à‡∏≤‡∏Å post_arrests...")
            conn.execute(text("""
                UPDATE criminal_cases 
                SET damage_amount = pa.damage_amount
                FROM post_arrests pa 
                WHERE criminal_cases.id = pa.criminal_case_id 
                AND criminal_cases.damage_amount IS NULL 
                AND pa.damage_amount IS NOT NULL
            """))
            
            conn.commit()
            print("   ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
            # 2. Drop redundant columns
            print("\n2. ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô...")
            
            # Drop columns from bank_accounts
            print("   üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å bank_accounts...")
            try:
                conn.execute(text("ALTER TABLE bank_accounts DROP COLUMN IF EXISTS complainant"))
                print("      ‚úÖ ‡∏•‡∏ö complainant ‡∏à‡∏≤‡∏Å bank_accounts")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö complainant ‡∏à‡∏≤‡∏Å bank_accounts: {e}")
            
            try:
                conn.execute(text("ALTER TABLE bank_accounts DROP COLUMN IF EXISTS victim_name"))
                print("      ‚úÖ ‡∏•‡∏ö victim_name ‡∏à‡∏≤‡∏Å bank_accounts")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö victim_name ‡∏à‡∏≤‡∏Å bank_accounts: {e}")
            
            # Drop columns from suspects
            print("   üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å suspects...")
            try:
                conn.execute(text("ALTER TABLE suspects DROP COLUMN IF EXISTS complainant"))
                print("      ‚úÖ ‡∏•‡∏ö complainant ‡∏à‡∏≤‡∏Å suspects")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö complainant ‡∏à‡∏≤‡∏Å suspects: {e}")
            
            try:
                conn.execute(text("ALTER TABLE suspects DROP COLUMN IF EXISTS victim_name"))
                print("      ‚úÖ ‡∏•‡∏ö victim_name ‡∏à‡∏≤‡∏Å suspects")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö victim_name ‡∏à‡∏≤‡∏Å suspects: {e}")
            
            # Drop columns from post_arrests
            print("   üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å post_arrests...")
            try:
                conn.execute(text("ALTER TABLE post_arrests DROP COLUMN IF EXISTS case_number"))
                print("      ‚úÖ ‡∏•‡∏ö case_number ‡∏à‡∏≤‡∏Å post_arrests")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö case_number ‡∏à‡∏≤‡∏Å post_arrests: {e}")
            
            try:
                conn.execute(text("ALTER TABLE post_arrests DROP COLUMN IF EXISTS accuser_name"))
                print("      ‚úÖ ‡∏•‡∏ö accuser_name ‡∏à‡∏≤‡∏Å post_arrests")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö accuser_name ‡∏à‡∏≤‡∏Å post_arrests: {e}")
            
            try:
                conn.execute(text("ALTER TABLE post_arrests DROP COLUMN IF EXISTS crime_scene"))
                print("      ‚úÖ ‡∏•‡∏ö crime_scene ‡∏à‡∏≤‡∏Å post_arrests")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö crime_scene ‡∏à‡∏≤‡∏Å post_arrests: {e}")
            
            try:
                conn.execute(text("ALTER TABLE post_arrests DROP COLUMN IF EXISTS damage_amount"))
                print("      ‚úÖ ‡∏•‡∏ö damage_amount ‡∏à‡∏≤‡∏Å post_arrests")
            except Exception as e:
                print(f"      ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö damage_amount ‡∏à‡∏≤‡∏Å post_arrests: {e}")
            
            conn.commit()
            print("   ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            
            # 3. Update models to reflect the changes
            print("\n3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Models...")
            print("   ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Models ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:")
            print("      - ‡∏•‡∏ö complainant, victim_name ‡∏à‡∏≤‡∏Å BankAccount model")
            print("      - ‡∏•‡∏ö complainant, victim_name ‡∏à‡∏≤‡∏Å Suspect model")
            print("      - ‡∏•‡∏ö case_number, accuser_name, crime_scene, damage_amount ‡∏à‡∏≤‡∏Å PostArrest model")
            
            # 4. Update API logic
            print("\n4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó API Logic...")
            print("   ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó API Logic ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:")
            print("      - ‡∏•‡∏ö logic ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ complainant matching")
            print("      - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Foreign Key relationships")
            
            # 5. Show final statistics
            print("\n5. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:")
            result = conn.execute(text("SELECT COUNT(*) FROM criminal_cases"))
            print(f"   üìã Criminal Cases: {result.fetchone()[0]:,} ‡∏Ñ‡∏î‡∏µ")
            
            result = conn.execute(text("SELECT COUNT(*) FROM bank_accounts"))
            print(f"   üè¶ Bank Accounts: {result.fetchone()[0]:,} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ")
            
            result = conn.execute(text("SELECT COUNT(*) FROM suspects"))
            print(f"   üë§ Suspects: {result.fetchone()[0]:,} ‡∏Ñ‡∏ô")
            
            result = conn.execute(text("SELECT COUNT(*) FROM post_arrests"))
            print(f"   üöî Post Arrests: {result.fetchone()[0]:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            print(f"\n{'=' * 80}")
            print("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            print("‚ö†Ô∏è  ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Models ‡πÅ‡∏•‡∏∞ API Logic ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á")
            print(f"{'=' * 80}")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        conn.rollback()

if __name__ == "__main__":
    clean_database_structure()
