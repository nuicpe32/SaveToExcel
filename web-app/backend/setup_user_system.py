#!/usr/bin/env python3
"""
Script to setup user system with master data and admin user
"""

import sys
import os
sys.path.append('/app')

from app.core.database import SessionLocal, engine
from app.models import User, PoliceRank, UserRole
from app.core.security import get_password_hash
from sqlalchemy import text
from datetime import datetime

def setup_user_system():
    """Setup user system with master data and admin user"""
    
    db = SessionLocal()
    try:
        print("üöÄ Setting up user system...")
        
        # 1. Create police ranks table and data
        print("üìã Creating police ranks...")
        create_ranks_table_sql = """
        CREATE TABLE IF NOT EXISTS police_ranks (
            id SERIAL PRIMARY KEY,
            rank_full VARCHAR(100) NOT NULL,
            rank_short VARCHAR(20) NOT NULL,
            rank_english VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        db.execute(text(create_ranks_table_sql))
        
        # Insert police ranks data
        ranks_data = [
            ("‡∏û‡∏•‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å", "‡∏û‡∏•.‡∏ï.‡∏≠.", "Police General"),
            ("‡∏û‡∏•‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏ó", "‡∏û‡∏•.‡∏ï.‡∏ó.", "Police Lieutenant General"),
            ("‡∏û‡∏•‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏£‡∏µ", "‡∏û‡∏•.‡∏ï.‡∏ï.", "Police Major General"),
            ("‡∏û‡∏±‡∏ô‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å", "‡∏û.‡∏ï.‡∏≠.", "Police Colonel"),
            ("‡∏û‡∏±‡∏ô‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏ó", "‡∏û.‡∏ï.‡∏ó.", "Police Lieutenant Colonel"),
            ("‡∏û‡∏±‡∏ô‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏£‡∏µ", "‡∏û.‡∏ï.‡∏ï.", "Police Major"),
            ("‡∏£‡πâ‡∏≠‡∏¢‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å", "‡∏£.‡∏ï.‡∏≠.", "Police Captain"),
            ("‡∏£‡πâ‡∏≠‡∏¢‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏ó", "‡∏£.‡∏ï.‡∏ó.", "Police Lieutenant"),
            ("‡∏£‡πâ‡∏≠‡∏¢‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏£‡∏µ", "‡∏£.‡∏ï.‡∏ï.", "Police Sub-Lieutenant"),
            ("‡∏î‡∏≤‡∏ö‡∏ï‡∏≥‡∏£‡∏ß‡∏à", "‡∏î.‡∏ï.", "Police Senior Sergeant Major"),
            ("‡∏à‡πà‡∏≤‡∏™‡∏¥‡∏ö‡∏ï‡∏≥‡∏£‡∏ß‡∏à", "‡∏à.‡∏™.‡∏ï.", "Police Sergeant Major"),
            ("‡∏™‡∏¥‡∏ö‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏≠‡∏Å", "‡∏™.‡∏ï.‡∏≠.", "Police Sergeant"),
            ("‡∏™‡∏¥‡∏ö‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡πÇ‡∏ó", "‡∏™.‡∏ï.‡∏ó.", "Police Corporal"),
            ("‡∏™‡∏¥‡∏ö‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏ï‡∏£‡∏µ", "‡∏™.‡∏ï.‡∏ï.", "Police Lance Corporal")
        ]
        
        db.execute(text("DELETE FROM police_ranks"))
        for rank_full, rank_short, rank_english in ranks_data:
            insert_sql = """
            INSERT INTO police_ranks (rank_full, rank_short, rank_english)
            VALUES (:rank_full, :rank_short, :rank_english)
            """
            db.execute(text(insert_sql), {
                "rank_full": rank_full,
                "rank_short": rank_short,
                "rank_english": rank_english
            })
        
        # 2. Create user roles table and data
        print("üë• Creating user roles...")
        create_roles_table_sql = """
        CREATE TABLE IF NOT EXISTS user_roles (
            id SERIAL PRIMARY KEY,
            role_name VARCHAR(50) NOT NULL UNIQUE,
            role_display VARCHAR(50) NOT NULL,
            role_description TEXT,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
        db.execute(text(create_roles_table_sql))
        
        # Insert user roles data
        roles_data = [
            ("admin", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"),
            ("investigator", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô‡∏Ñ‡∏î‡∏µ"),
            ("detective", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
            ("clerk", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏≤‡∏£"),
            ("supervisor", "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤", "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á")
        ]
        
        db.execute(text("DELETE FROM user_roles"))
        for role_name, role_display, role_description in roles_data:
            insert_sql = """
            INSERT INTO user_roles (role_name, role_display, role_description)
            VALUES (:role_name, :role_display, :role_description)
            """
            db.execute(text(insert_sql), {
                "role_name": role_name,
                "role_display": role_display,
                "role_description": role_description
            })
        
        # 3. Update users table structure
        print("üîß Updating users table...")
        
        # Add new columns to users table
        alter_users_sql = """
        ALTER TABLE users 
        ADD COLUMN IF NOT EXISTS rank_id INTEGER REFERENCES police_ranks(id),
        ADD COLUMN IF NOT EXISTS position VARCHAR(255),
        ADD COLUMN IF NOT EXISTS phone_number VARCHAR(20),
        ADD COLUMN IF NOT EXISTS line_id VARCHAR(100),
        ADD COLUMN IF NOT EXISTS role_id INTEGER REFERENCES user_roles(id),
        ADD COLUMN IF NOT EXISTS is_approved BOOLEAN DEFAULT FALSE,
        ADD COLUMN IF NOT EXISTS failed_login_attempts INTEGER DEFAULT 0,
        ADD COLUMN IF NOT EXISTS locked_until TIMESTAMP,
        ADD COLUMN IF NOT EXISTS approved_at TIMESTAMP,
        ADD COLUMN IF NOT EXISTS approved_by INTEGER REFERENCES users(id);
        """
        db.execute(text(alter_users_sql))
        
        # 4. Update existing admin user
        print("üë§ Updating admin user...")
        
        # Get admin role ID
        admin_role_result = db.execute(text("SELECT id FROM user_roles WHERE role_name = 'admin'"))
        admin_role_id = admin_role_result.scalar()
        
        # Get highest rank ID (‡∏û‡∏•.‡∏ï.‡∏≠.)
        highest_rank_result = db.execute(text("SELECT id FROM police_ranks WHERE rank_short = '‡∏û‡∏•.‡∏ï.‡∏≠.'"))
        highest_rank_id = highest_rank_result.scalar()
        
        # Update admin user
        update_admin_sql = """
        UPDATE users 
        SET rank_id = :rank_id,
            role_id = :role_id,
            is_active = TRUE,
            is_approved = TRUE,
            approved_at = CURRENT_TIMESTAMP
        WHERE username = 'admin'
        """
        db.execute(text(update_admin_sql), {
            "rank_id": highest_rank_id,
            "role_id": admin_role_id
        })
        
        db.commit()
        print("‚úÖ User system setup completed successfully!")
        
        # Verify setup
        ranks_count = db.execute(text("SELECT COUNT(*) FROM police_ranks")).scalar()
        roles_count = db.execute(text("SELECT COUNT(*) FROM user_roles")).scalar()
        admin_user = db.execute(text("SELECT username, is_approved FROM users WHERE username = 'admin'")).fetchone()
        
        print(f"üìä Police ranks created: {ranks_count}")
        print(f"üìä User roles created: {roles_count}")
        if admin_user:
            print(f"üë§ Admin user status: {admin_user[0]} - Approved: {admin_user[1]}")
        else:
            print("üë§ Admin user not found")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    setup_user_system()
