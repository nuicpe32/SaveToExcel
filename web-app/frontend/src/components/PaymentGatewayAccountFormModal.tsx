import { useEffect, useState } from 'react'
import { Modal, Form, Input, DatePicker, Select, Switch, Row, Col, message, Button, Table, Popconfirm } from 'antd'
import { PlusOutlined, DeleteOutlined } from '@ant-design/icons'
import dayjs from 'dayjs'
import 'dayjs/locale/th'
import api from '../services/api'

const { TextArea } = Input
const { Option } = Select
const { RangePicker } = DatePicker

interface TransferDetail {
  key: string
  source_bank_id?: number
  source_bank_name?: string
  source_account_number?: string
  source_account_name?: string
  transfer_date?: string
  transfer_time?: string
  transfer_amount?: string
  note?: string
  _existing_id?: number  // ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
const formatThaiMonth = (month: number): string => {
  const thaiMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', 
                      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
  return thaiMonths[month]
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
const parseThaiMonth = (monthStr: string): number => {
  const thaiMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', 
                      '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
  return thaiMonths.indexOf(monthStr)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á date range ‡πÄ‡∏õ‡πá‡∏ô text ‡πÑ‡∏ó‡∏¢
const formatDateRangeToThai = (dates: [dayjs.Dayjs, dayjs.Dayjs] | null): string => {
  if (!dates || !dates[0] || !dates[1]) return ''
  
  const startDate = dates[0]
  const endDate = dates[1]
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
  const startDay = startDate.date()
  const startMonth = formatThaiMonth(startDate.month())
  const startYear = (startDate.year() + 543).toString().slice(-2) // ‡πÄ‡∏≠‡∏≤ 2 ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á
  
  const endDay = endDate.date()
  const endMonth = formatThaiMonth(endDate.month())
  const endYear = (endDate.year() + 543).toString().slice(-2)
  
  return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á text ‡πÑ‡∏ó‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô date range objects
const parseThaiDateRange = (thaiDateRange: string): [dayjs.Dayjs, dayjs.Dayjs] | null => {
  if (!thaiDateRange) return null
  
  try {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "4 ‡∏™.‡∏Ñ. 68 - 6 ‡∏™.‡∏Ñ. 68"
    const parts = thaiDateRange.split(' - ')
    if (parts.length !== 2) return null
    
    // Parse start date
    const startParts = parts[0].trim().split(' ')
    if (startParts.length !== 3) return null
    const startDay = parseInt(startParts[0])
    const startMonth = parseThaiMonth(startParts[1])
    const startYear = parseInt(startParts[2]) + 2500 - 543 // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å ‚Üí ‡∏Ñ.‡∏®. 4 ‡∏´‡∏•‡∏±‡∏Å
    
    // Parse end date
    const endParts = parts[1].trim().split(' ')
    if (endParts.length !== 3) return null
    const endDay = parseInt(endParts[0])
    const endMonth = parseThaiMonth(endParts[1])
    const endYear = parseInt(endParts[2]) + 2500 - 543 // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å ‚Üí ‡∏Ñ.‡∏®. 4 ‡∏´‡∏•‡∏±‡∏Å
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á dayjs objects
    const startDate = dayjs().year(startYear).month(startMonth).date(startDay)
    const endDate = dayjs().year(endYear).month(endMonth).date(endDay)
    
    if (!startDate.isValid() || !endDate.isValid()) return null
    
    return [startDate, endDate]
  } catch (error) {
    console.error('Error parsing Thai date range:', error)
    return null
  }
}

interface PaymentGatewayAccountFormModalProps {
  visible: boolean
  criminalCaseId: number
  editingRecord?: any
  onClose: (success?: boolean) => void
}

export default function PaymentGatewayAccountFormModal({
  visible,
  criminalCaseId,
  editingRecord,
  onClose,
}: PaymentGatewayAccountFormModalProps) {
  const [form] = Form.useForm()
  const isEdit = !!editingRecord && !editingRecord._is_new_from_cfr
  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs] | null>(null)
  const isFromCfr = !!editingRecord && editingRecord._is_new_from_cfr
  const [paymentGateways, setPaymentGateways] = useState<any[]>([])
  const [banks, setBanks] = useState<any[]>([])
  const [transferDetails, setTransferDetails] = useState<TransferDetail[]>([])
  const MAX_TRANSFERS = 5
  const MIN_TRANSFERS = 1  // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

  // Helper function: ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏≤‡∏Å ID
  const getBankNameById = (bankId?: number): string => {
    if (!bankId) return ''
    const bank = banks.find(b => b.id === bankId)
    return bank?.bank_name || ''
  }

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const fetchExistingTransactions = async (paymentGatewayAccountId: number) => {
    try {
      const response = await api.get(`/payment-gateway-transactions/?payment_gateway_account_id=${paymentGatewayAccountId}`)
      const transactions = response.data
      
      console.log('üì¶ Fetched existing transactions:', transactions)
      
      if (transactions && transactions.length > 0) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô TransferDetail format
        const formattedTransactions: TransferDetail[] = transactions.map((t: any) => ({
          key: `existing-${t.id}`,
          source_bank_id: t.source_bank_id,
          source_bank_name: getBankNameById(t.source_bank_id) || t.source_bank_name,
          source_account_number: t.source_account_number,
          source_account_name: t.source_account_name,
          transfer_date: t.transfer_date,
          transfer_time: t.transfer_time,
          transfer_amount: t.transfer_amount?.toString(),
          note: t.note,
          _existing_id: t.id,
        }))
        
        console.log('‚úÖ Formatted transactions:', formattedTransactions)
        setTransferDetails(formattedTransactions)
        
        message.info(`‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ${formattedTransactions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
      }
    } catch (error) {
      console.error('Error fetching transactions:', error)
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Payment Gateway Payment Gateway
  useEffect(() => {
    const fetchPaymentGateways = async () => {
      try {
        const response = await api.get('/payment-gateways/')
        setPaymentGateways(response.data)
      } catch (error) {
        console.error('Error fetching payment gateways:', error)
      }
    }
    if (visible) {
      fetchPaymentGateways()
    }
  }, [visible])

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
  useEffect(() => {
    const fetchBanks = async () => {
      try {
        const response = await api.get('/banks/')
        setBanks(response.data)
      } catch (error) {
        console.error('Error fetching banks:', error)
      }
    }
    if (visible) {
      fetchBanks()
    }
  }, [visible])

  useEffect(() => {
    if (visible) {
      if (editingRecord) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç - ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        console.log('üîç Editing record:', editingRecord)
        console.log('üè¶ Bank ID from record:', editingRecord.bank_id)
        console.log('üí≥ Payment Gateway ID from record:', editingRecord.payment_gateway_id)
        
        form.setFieldsValue({
          ...editingRecord,
          document_date: editingRecord.document_date
            ? dayjs(editingRecord.document_date)
            : null,
          delivery_date: editingRecord.delivery_date
            ? dayjs(editingRecord.delivery_date)
            : null,
        })
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• date range ‡∏à‡∏≤‡∏Å CFR
        if (editingRecord._date_range_start && editingRecord._date_range_end) {
          const dateRangeValue: [dayjs.Dayjs, dayjs.Dayjs] = [
            editingRecord._date_range_start,
            editingRecord._date_range_end
          ]
          setDateRange(dateRangeValue)
        } else if (editingRecord.time_period) {
          // ‡πÅ‡∏õ‡∏•‡∏á time_period (text) ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô date range objects
          const parsedDateRange = parseThaiDateRange(editingRecord.time_period)
          if (parsedDateRange) {
            setDateRange(parsedDateRange)
          } else {
            setDateRange(null)
          }
        } else {
          setDateRange(null)
        }
        
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (editingRecord.id) {
          fetchExistingTransactions(editingRecord.id)
        }
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà - reset form
        form.resetFields()
        setDateRange(null) // reset date range
        setTransferDetails([]) // reset transfer list
        const today = dayjs()
        const deliveryDate = today.add(14, 'day')
        form.setFieldsValue({
          criminal_case_id: criminalCaseId,
          document_date: today,           // ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
          delivery_date: deliveryDate,     // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + 14 ‡∏ß‡∏±‡∏ô
          reply_status: false,
          status: 'pending',
        })
      }
    } else {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ reset
      setTransferDetails([])
    }
  }, [visible, editingRecord, criminalCaseId, form])

  const handleSubmit = async () => {
    try {
      // Validate: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      if (transferDetails.length < MIN_TRANSFERS) {
        message.error(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${MIN_TRANSFERS} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
        return
      }

      const values = await form.validateFields()

      console.log('üìù Form values:', values)
      console.log('üè¶ Bank ID:', values.bank_id)
      console.log('üí≥ Payment Gateway ID:', values.payment_gateway_id)

      // ‡πÅ‡∏õ‡∏•‡∏á dates ‡πÄ‡∏õ‡πá‡∏ô string
      const payload = {
        ...values,
        criminal_case_id: criminalCaseId,
        document_date: values.document_date
          ? values.document_date.format('YYYY-MM-DD')
          : null,
        delivery_date: values.delivery_date
          ? values.delivery_date.format('YYYY-MM-DD')
          : null,
        // ‡πÅ‡∏õ‡∏•‡∏á date range ‡πÄ‡∏õ‡πá‡∏ô text ‡πÑ‡∏ó‡∏¢
        time_period: dateRange ? formatDateRangeToThai(dateRange) : values.time_period,
      }

      console.log('üì§ Payload:', payload)

      let paymentGatewayAccountId = editingRecord?.id

      try {
        if (isEdit) {
          const response = await api.put(`/payment-gateway-accounts/${editingRecord.id}`, payload)
          console.log('‚úÖ Updated account:', response.data)
          message.success('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        } else {
          const response = await api.post('/payment-gateway-accounts/', payload)
          paymentGatewayAccountId = response.data.id
          console.log('‚úÖ Created account:', response.data)
          message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
        }
      } catch (err: any) {
        // ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (401) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å handle ‡πÇ‡∏î‡∏¢ interceptor
        // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á error
        if (err.message === 'Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà') {
          message.error('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
          // interceptor ‡∏à‡∏∞ redirect ‡πÑ‡∏õ login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          return
        }
        throw err // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ catch block ‡∏ô‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
      if (transferDetails.length > 0 && paymentGatewayAccountId) {
        let successCount = 0
        let failCount = 0

        for (const transfer of transferDetails) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
          if (transfer._existing_id) {
            // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏° - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á POST ‡∏ã‡πâ‡∏≥)
            console.log('‚è≠Ô∏è Skipping existing transaction:', transfer._existing_id)
            continue
          }
          
          // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏´‡πâ POST
          const transactionPayload = {
            criminal_case_id: criminalCaseId,
            payment_gateway_account_id: paymentGatewayAccountId,
            source_bank_id: transfer.source_bank_id,
            source_account_number: transfer.source_account_number,
            source_account_name: transfer.source_account_name,
            destination_bank_id: values.bank_id,
            destination_account_number: values.account_number,
            destination_account_name: values.account_name,
            transfer_date: transfer.transfer_date,
            transfer_time: transfer.transfer_time,
            transfer_amount: transfer.transfer_amount,
            note: transfer.note,
          }

          try {
            console.log('‚ûï Adding new transaction:', transactionPayload)
            await api.post('/payment-gateway-transactions/', transactionPayload)
            successCount++
          } catch (err: any) {
            if (err.message === 'Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà') {
              message.error('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
              return
            }
            failCount++
            console.error('Error saving transaction:', err)
          }
        }

        if (successCount > 0) {
          message.success(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
        } else if (successCount === 0 && failCount === 0) {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°)
          console.log('‚ÑπÔ∏è No new transactions to add')
        }
        if (failCount > 0) {
          message.warning(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô ${failCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ`)
        }
      }

      form.resetFields()
      setTransferDetails([])
      onClose(true)
    } catch (err: any) {
      if (err.errorFields) {
        message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
      } else if (err.message && err.message.includes('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏')) {
        // Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ - interceptor ‡∏à‡∏∞ redirect
        return
      } else {
        const errorMsg = err.response?.data?.detail || (isEdit ? '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway‡πÑ‡∏î‡πâ' : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway‡πÑ‡∏î‡πâ')
        message.error(errorMsg)
        console.error('Error:', err)
      }
    }
  }

  const handleAddTransfer = () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    if (transferDetails.length >= MAX_TRANSFERS) {
      message.warning(`‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${MAX_TRANSFERS} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`)
      return
    }

    const values = form.getFieldsValue()
    
    // Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
    if (!values.source_bank_id) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á')
      return
    }
    if (!values.transfer_date || !values.transfer_amount) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô')
      return
    }

    // ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
    const selectedBank = banks.find(b => b.id === values.source_bank_id)
    
    const newTransfer: TransferDetail = {
      key: `${Date.now()}`,
      source_bank_id: values.source_bank_id,
      source_bank_name: selectedBank?.bank_name,
      source_account_number: values.source_account_number,
      source_account_name: values.source_account_name,
      transfer_date: values.transfer_date ? values.transfer_date.format('YYYY-MM-DD') : undefined,
      transfer_time: values.transfer_time,
      transfer_amount: values.transfer_amount,
      note: values.transfer_note,
    }

    setTransferDetails([...transferDetails, newTransfer])
    
    // Reset ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
    form.setFieldsValue({
      source_bank_id: undefined,
      source_account_number: '',
      source_account_name: '',
      transfer_date: null,
      transfer_time: '',
      transfer_amount: '',
      transfer_note: '',
    })
    
    message.success('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
  }

  const handleDeleteTransfer = async (key: string) => {
    const transfer = transferDetails.find(item => item.key === key)
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢
    if (transfer?._existing_id) {
      try {
        await api.delete(`/payment-gateway-transactions/${transfer._existing_id}`)
        console.log('üóëÔ∏è Deleted existing transaction from database:', transfer._existing_id)
        message.success('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
      } catch (err) {
        message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ')
        console.error('Error deleting transaction:', err)
        return // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏à‡∏≤‡∏Å UI
      }
    } else {
      message.success('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
    }
    
    // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å UI
    setTransferDetails(transferDetails.filter(item => item.key !== key))
  }

  const handleCancel = () => {
    form.resetFields()
    setDateRange(null)
    setTransferDetails([])
    onClose(false)
  }

  return (
    <Modal
      title={isEdit ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Payment Gateway'}
      open={visible}
      onOk={handleSubmit}
      onCancel={handleCancel}
      width={1200}
      okText={isEdit ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‡πÄ‡∏û‡∏¥‡πà‡∏°'}
      cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
    >
      <Form form={form} layout="vertical">
        <Row gutter={16}>
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          <Col span={24}>
            <h4 style={{ marginTop: 16, marginBottom: 12, color: '#1890ff' }}>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
            </h4>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"
              name="document_number"
            >
              <Input placeholder="‡∏ï‡∏ä.0039.52/.." />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item label="‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" name="document_date">
              <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
            </Form.Item>
          </Col>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ */}
          <Col span={24}>
            <h4 style={{ marginTop: 16, marginBottom: 12, color: '#1890ff' }}>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
            </h4>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡∏ä‡∏∑‡πà‡∏≠ Payment Gateway"
              name="payment_gateway_id"
              rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Payment Gateway' }]}
            >
              <Select
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Payment Gateway"
                showSearch
                filterOption={(input, option) =>
                  (option?.children?.toString() || '')
                    .toLowerCase()
                    .includes(input.toLowerCase())
                }
              >
                {paymentGateways.map((pg) => (
                  <Option key={pg.id} value={pg.id}>
                    {pg.company_name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"
              name="bank_id"
              rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' }]}
            >
              <Select
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"
                showSearch
                filterOption={(input, option) =>
                  (option?.children?.toString() || '')
                    .toLowerCase()
                    .includes(input.toLowerCase())
                }
              >
                {banks.map((bank) => (
                  <Option key={bank.id} value={bank.id}>
                    {bank.bank_name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
              name="account_number"
              rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' }]}
            >
              <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 1234567890" />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"
              name="account_name"
              rules={[{ required: true, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' }]}
            >
              <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" />
            </Form.Item>
          </Col>

          <Col span={24}>
            <Form.Item label="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°">
              <RangePicker
                style={{ width: '100%' }}
                format="DD/MM/YYYY"
                placeholder={['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î']}
                value={dateRange}
                onChange={(dates) => {
                  setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs] | null)
                  if (dates) {
                    const formattedText = formatDateRangeToThai(dates as [dayjs.Dayjs, dayjs.Dayjs])
                    form.setFieldsValue({ time_period: formattedText })
                  } else {
                    form.setFieldsValue({ time_period: '' })
                  }
                }}
              />
              <Form.Item name="time_period" noStyle>
                <Input type="hidden" />
              </Form.Item>
              {dateRange && (
                <div style={{ marginTop: 8, color: isFromCfr ? '#ff4d4f' : '#1890ff', fontSize: '13px', fontWeight: isFromCfr ? 'bold' : 'normal' }}>
                  ‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô: {formatDateRangeToThai(dateRange)}
                  {isFromCfr && <span style={{ marginLeft: 8 }}>(‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CFR)</span>}
                </div>
              )}
            </Form.Item>
          </Col>

          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) */}
          <Col span={24}>
            <h4 style={{ marginTop: 16, marginBottom: 12, color: '#1890ff' }}>
              ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            </h4>
          </Col>

          <>
              {/* ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á */}
              <Col span={24}>
                <h4 style={{ marginTop: 8, marginBottom: 8, color: '#52c41a' }}>
                  1. ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (Source Account)
                </h4>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£" name="source_bank_id">
                  <Select
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"
                    showSearch
                    filterOption={(input, option) =>
                      (option?.children?.toString() || '')
                        .toLowerCase()
                        .includes(input.toLowerCase())
                    }
                  >
                    {banks.map((bank) => (
                      <Option key={bank.id} value={bank.id}>
                        {bank.bank_name}
                      </Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" name="source_account_number">
                  <Input placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á" />
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" name="source_account_name">
                  <Input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á" />
                </Form.Item>
              </Col>

              {/* ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á */}
              <Col span={24}>
                <h4 style={{ marginTop: 8, marginBottom: 8, color: '#ff4d4f' }}>
                  2. ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (Destination Account)
                </h4>
                <p style={{ fontSize: '13px', color: '#888', marginTop: -4, marginBottom: 8 }}>
                  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                </p>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£">
                  <Input 
                    disabled 
                    value={
                      form.getFieldValue('bank_id')
                        ? banks.find(b => b.id === form.getFieldValue('bank_id'))?.bank_name || '-'
                        : '-'
                    } 
                  />
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
                  <Input disabled value={form.getFieldValue('account_number') || '-'} />
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
                  <Input disabled value={form.getFieldValue('account_name') || '-'} />
                </Form.Item>
              </Col>

              {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô */}
              <Col span={24}>
                <h4 style={{ marginTop: 8, marginBottom: 8, color: '#1890ff' }}>
                  3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                </h4>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô" name="transfer_date">
                  <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô" name="transfer_time">
                  <Input placeholder="‡πÄ‡∏ä‡πà‡∏ô 14:30" />
                </Form.Item>
              </Col>

              <Col span={8}>
                <Form.Item label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)" name="transfer_amount">
                  <Input type="number" placeholder="‡πÄ‡∏ä‡πà‡∏ô 50000" />
                </Form.Item>
              </Col>

              <Col span={24}>
                <Form.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô" name="transfer_note">
                  <TextArea rows={2} placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô..." />
                </Form.Item>
              </Col>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô */}
              <Col span={24} style={{ textAlign: 'center', marginTop: 16 }}>
                <Button
                  type="dashed"
                  icon={<PlusOutlined />}
                  onClick={handleAddTransfer}
                  disabled={transferDetails.length >= MAX_TRANSFERS}
                  block
                  size="large"
                  style={{
                    borderColor: transferDetails.length >= MAX_TRANSFERS ? '#d9d9d9' : '#1890ff',
                    color: transferDetails.length >= MAX_TRANSFERS ? '#999' : '#1890ff',
                  }}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ({transferDetails.length}/{MAX_TRANSFERS})
                </Button>
                {transferDetails.length >= MAX_TRANSFERS && (
                  <p style={{ color: '#ff4d4f', fontSize: '13px', marginTop: 8 }}>
                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_TRANSFERS} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                  </p>
                )}
              </Col>

              {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß */}
              {transferDetails.length > 0 && (
                <Col span={24} style={{ marginTop: 16 }}>
                  <h4 style={{ marginBottom: 8, color: '#52c41a' }}>
                    ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ({transferDetails.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                  </h4>
                  <Table
                    dataSource={transferDetails}
                    size="small"
                    pagination={false}
                    bordered
                    columns={[
                      {
                        title: '#',
                        key: 'index',
                        width: 50,
                        render: (_, __, index) => index + 1,
                      },
                      {
                        title: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
                        dataIndex: 'source_bank_name',
                        key: 'source_bank_name',
                        width: 200,
                      },
                      {
                        title: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
                        dataIndex: 'source_account_number',
                        key: 'source_account_number',
                        width: 150,
                      },
                      {
                        title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô',
                        dataIndex: 'transfer_date',
                        key: 'transfer_date',
                        width: 120,
                        render: (date) => date ? dayjs(date).format('DD/MM/YYYY') : '-',
                      },
                      {
                        title: '‡πÄ‡∏ß‡∏•‡∏≤',
                        dataIndex: 'transfer_time',
                        key: 'transfer_time',
                        width: 80,
                      },
                      {
                        title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
                        dataIndex: 'transfer_amount',
                        key: 'transfer_amount',
                        width: 120,
                        render: (amount) => amount ? `${parseFloat(amount).toLocaleString()} ‡∏ö‡∏≤‡∏ó` : '-',
                      },
                      {
                        title: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
                        key: 'action',
                        width: 80,
                        render: (_, record) => (
                          <Popconfirm
                            title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?"
                            onConfirm={() => handleDeleteTransfer(record.key)}
                            okText="‡∏•‡∏ö"
                            cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                          >
                            <Button
                              danger
                              size="small"
                              icon={<DeleteOutlined />}
                            >
                              ‡∏•‡∏ö
                            </Button>
                          </Popconfirm>
                        ),
                      },
                    ]}
                  />
                </Col>
              )}
            </>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ */}
          <Col span={24}>
            <h4 style={{ marginTop: 16, marginBottom: 12, color: '#1890ff' }}>
              ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
            </h4>
          </Col>

          <Col span={12}>
            <Form.Item label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£" name="delivery_date">
              <DatePicker style={{ width: '100%' }} format="DD/MM/YYYY" />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item
              label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"
              name="reply_status"
              valuePropName="checked"
            >
              <Switch checkedChildren="‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß" unCheckedChildren="‡∏£‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö" />
            </Form.Item>
          </Col>

          {/* ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
          <Col span={24}>
            <Form.Item label="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" name="notes">
              <TextArea rows={3} placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°..." />
            </Form.Item>
          </Col>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <Col span={24}>
            <p style={{ marginTop: 8, color: '#888', fontSize: '13px' }}>
              üìç ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            </p>
          </Col>
        </Row>
      </Form>
    </Modal>
  )
}
