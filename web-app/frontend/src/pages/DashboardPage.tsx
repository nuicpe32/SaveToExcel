import { useCallback, useEffect, useState } from 'react'
import { Table, message, Tag, Space, Button, Descriptions, Drawer, Tabs, Popconfirm, Modal, Input, Upload, Card, List, Spin } from 'antd'
import type { ColumnsType } from 'antd/es/table'
import { EditOutlined, DeleteOutlined, PlusOutlined, PrinterOutlined, UploadOutlined, FileExcelOutlined, ApartmentOutlined } from '@ant-design/icons'
import { useNavigate } from 'react-router-dom'
import api from '../services/api'
import { useAuthStore } from '../stores/authStore'
import BankAccountFormModal from '../components/BankAccountFormModal'
import NonBankAccountFormModal from '../components/NonBankAccountFormModal'
import SuspectFormModal from '../components/SuspectFormModal'
import CfrFlowChart from '../components/CfrFlowChart'
import dayjs from 'dayjs'

interface BankAccount {
  id: number
  order_number?: number
  document_number?: string
  document_date?: string
  document_date_thai?: string
  bank_name: string
  account_number: string
  account_name: string
  account_owner?: string
  complainant?: string
  victim_name?: string
  case_id?: string
  time_period?: string
  delivery_date?: string
  delivery_month?: string
  delivery_time?: string
  reply_status: boolean
  status: string
  // Note: bank_branch and bank_address removed - use headquarters address from banks table
}

interface NonBankAccount {
  id: number
  order_number?: number
  document_number?: string
  document_date?: string
  document_date_thai?: string
  provider_name: string
  account_number: string
  account_name: string
  account_owner?: string
  complainant?: string
  victim_name?: string
  case_id?: string
  time_period?: string
  delivery_date?: string
  delivery_month?: string
  delivery_time?: string
  reply_status: boolean
  status: string
}

interface Suspect {
  id: number
  document_number?: string
  document_date?: string
  document_date_thai?: string
  suspect_name: string
  suspect_id_card?: string
  suspect_address?: string
  police_station?: string
  police_province?: string
  police_address?: string
  complainant?: string
  victim_name?: string
  case_id?: string
  appointment_date?: string
  appointment_date_thai?: string
  reply_status: boolean
  status: string
}

interface CriminalCase {
  id: number
  case_number?: string
  case_id?: string
  status: string
  complainant: string
  case_type?: string
  complaint_date?: string
  complaint_date_thai?: string
  incident_date?: string
  incident_date_thai?: string
  damage_amount?: string
  case_age_months?: number
  case_age_days?: number
  bank_accounts_count?: string
  suspects_count?: string
  court_name?: string
  row_class?: string
  row_style?: Record<string, any>
}

export default function DashboardPage() {
  const [data, setData] = useState<CriminalCase[]>([])
  const [loading, setLoading] = useState(false)
  const [open, setOpen] = useState(false)
  const [selected, setSelected] = useState<CriminalCase | null>(null)
  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([])
  const [nonBankAccounts, setNonBankAccounts] = useState<NonBankAccount[]>([])
  const [suspects, setSuspects] = useState<Suspect[]>([])
  const [loadingDetails, setLoadingDetails] = useState(false)
  const [suspectDetailOpen, setSuspectDetailOpen] = useState(false)
  const [selectedSuspect, setSelectedSuspect] = useState<Suspect | null>(null)
  const [bankModalVisible, setBankModalVisible] = useState(false)
  const [suspectModalVisible, setSuspectModalVisible] = useState(false)
  const [editingBank, setEditingBank] = useState<BankAccount | null>(null)
  const [editingNonBank, setEditingNonBank] = useState<NonBankAccount | null>(null)
  const [nonBankModalVisible, setNonBankModalVisible] = useState(false)
  const [editingSuspect, setEditingSuspect] = useState<Suspect | null>(null)
  const [cfrFiles, setCfrFiles] = useState<any[]>([])
  const [uploadingCfr, setUploadingCfr] = useState(false)
  const [cfrRecords, setCfrRecords] = useState<any[]>([])
  const [loadingCfr, setLoadingCfr] = useState(false)
  const [selectedCfrAccount, setSelectedCfrAccount] = useState<any>(null)
  const [cfrDetailVisible, setCfrDetailVisible] = useState(false)
  const [flowChartVisible, setFlowChartVisible] = useState(false)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
  const formatThaiDate = (date: string | undefined): string => {
    if (!date) return '-'
    
    const thaiMonths = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ]
    
    const dayjsDate = dayjs(date)
    const day = dayjsDate.date()
    const month = thaiMonths[dayjsDate.month()]
    const year = dayjsDate.year() + 543 // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
    
    return `${day} ${month} ${year}`
  }
  
  // Statistics state
  const [stats, setStats] = useState({
    totalCases: 0,
    processingCases: 0,
    over6MonthsCases: 0,
    closedCases: 0
  })
  
  const navigate = useNavigate()
  const { token, user } = useAuthStore()

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ
  const calculateStats = useCallback((cases: CriminalCase[]) => {
    const now = new Date()
    const sixMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 6, now.getDate())
    
    const totalCases = cases.length
    let processingCases = 0
    let over6MonthsCases = 0
    let closedCases = 0
    
    cases.forEach(caseItem => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏î‡∏µ - ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' ‡πÅ‡∏•‡∏∞ '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô'
      if (caseItem.status === '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢') {
        closedCases++
      } else if (caseItem.status === '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô') {
        processingCases++
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà)
        if (caseItem.complaint_date) {
          const complaintDate = new Date(caseItem.complaint_date)
          if (complaintDate < sixMonthsAgo) {
            over6MonthsCases++
          }
        }
      }
    })
    
    console.log('üìä Statistics calculation:', {
      totalCases,
      processingCases,
      over6MonthsCases,
      closedCases,
      statusBreakdown: cases.reduce((acc, caseItem) => {
        acc[caseItem.status] = (acc[caseItem.status] || 0) + 1
        return acc
      }, {} as Record<string, number>)
    })
    
    return {
      totalCases,
      processingCases,
      over6MonthsCases,
      closedCases
    }
  }, [])

  const fetchData = useCallback(async () => {
    try {
      setLoading(true)
      console.log('üîç Dashboard: Fetching data...', { token: !!token, user: !!user })
      
      const res = await api.get<CriminalCase[]>('/criminal-cases/')
      console.log('üìä Dashboard: Data received:', res.data.length, 'cases')
      
      // Sort by complaint_date descending (newest first)
      const sortedData = res.data.sort((a, b) => {
        if (!a.complaint_date && !b.complaint_date) return 0
        if (!a.complaint_date) return 1
        if (!b.complaint_date) return -1
        return new Date(b.complaint_date).getTime() - new Date(a.complaint_date).getTime()
      })
      setData(sortedData)
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      const calculatedStats = calculateStats(sortedData)
      setStats(calculatedStats)
      
      console.log('‚úÖ Dashboard: Data sorted and set:', sortedData.length, 'cases')
      console.log('üìä Dashboard: Statistics calculated:', calculatedStats)
    } catch (err: any) {
      console.error('‚ùå Dashboard: Error fetching data:', err)
      console.error('‚ùå Dashboard: Error response:', err.response?.data)
      console.error('‚ùå Dashboard: Error status:', err.response?.status)
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏î‡∏µ‡∏≠‡∏≤‡∏ç‡∏≤‡πÑ‡∏î‡πâ')
    } finally {
      setLoading(false)
    }
  }, [token, user])

  useEffect(() => {
    console.log('üöÄ Dashboard: Component mounted, token:', !!token, 'user:', !!user)
    if (!token || !user) {
      console.log('‚ö†Ô∏è Dashboard: No auth token or user, redirecting to login')
      navigate('/login')
      return
    }
    fetchData()
  }, [fetchData, navigate, token, user])

  const fetchCaseDetails = useCallback(async (caseId: number) => {
    try {
      setLoadingDetails(true)
      const [bankRes, nonBankRes, suspectsRes] = await Promise.all([
        api.get<BankAccount[]>(`/criminal-cases/${caseId}/bank-accounts`),
        api.get<NonBankAccount[]>(`/non-bank-accounts/by-case/${caseId}`),
        api.get<Suspect[]>(`/criminal-cases/${caseId}/suspects`)
      ])
      setBankAccounts(bankRes.data)
      setNonBankAccounts(nonBankRes.data)
      setSuspects(suspectsRes.data)
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏î‡∏µ‡πÑ‡∏î‡πâ')
    } finally {
      setLoadingDetails(false)
    }
  }, [])

  const showDetails = (record: CriminalCase) => {
    setSelected(record)
    setOpen(true)
    fetchCaseDetails(record.id)
    fetchCfrFiles(record.id)
  }

  const fetchCfrFiles = async (caseId: number) => {
    try {
      const response = await api.get(`/cfr/${caseId}/files`)
      setCfrFiles(response.data)
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• records ‡∏î‡πâ‡∏ß‡∏¢
      fetchCfrRecords(caseId)
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå CFR ‡πÑ‡∏î‡πâ')
    }
  }

  const fetchCfrRecords = async (caseId: number) => {
    setLoadingCfr(true)
    try {
      const response = await api.get(`/cfr/${caseId}/records`, {
        params: { limit: 1000 } // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 1000 records
      })
      setCfrRecords(response.data.records || [])
    } catch (error) {
      console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFR records ‡πÑ‡∏î‡πâ')
      setCfrRecords([])
    } finally {
      setLoadingCfr(false)
    }
  }

  const showCfrAccountDetail = (record: any) => {
    setSelectedCfrAccount(record)
    setCfrDetailVisible(true)
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFR
  const handleCreateSummonsFromCfr = (cfrRecord: any) => {
    // Parse ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å CFR
    // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2500 ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏Å‡πà‡∏≠‡∏ô
    let transferDateStr = cfrRecord.transfer_date
    const year = parseInt(transferDateStr.split('-')[0])
    
    if (year > 2500) {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
      const adYear = year - 543
      transferDateStr = transferDateStr.replace(year.toString(), adYear.toString())
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô - 1 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á)
    const transferDate = dayjs(transferDateStr)
    const startDate = transferDate.subtract(1, 'day')
    const endDate = transferDate.add(1, 'day')

    // ‡∏´‡∏≤‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡∏≤‡∏Å bank_short_name
    const bankName = cfrRecord.to_bank_short_name
    let selectedBankName = ''
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping ‡∏Ç‡∏≠‡∏á bank_short_name ‡∏Å‡∏±‡∏ö bank_name
    if (bankName) {
      const bankMapping: { [key: string]: string } = {
        'BBL': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
        'KBANK': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢',
        'KBNK': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢',  // ‡πÄ‡∏û‡∏¥‡πà‡∏° KBNK (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏™‡∏¥‡∏Å‡∏£)
        'KTB': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢',
        'TTB': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï',
        'SCB': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå',
        'BAY': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤',
        'CIMBT': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ ‡πÑ‡∏ó‡∏¢',
        'UOBT': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ',
        'KKP': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ô‡∏≤‡∏Ñ‡∏¥‡∏ô‡∏†‡∏±‡∏ó‡∏£',
        'GSB': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô',
        'GHB': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå',
        'BAAC': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£',
        'LH': '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏ô‡∏î‡πå ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå'
      }
      
      selectedBankName = bankMapping[bankName] || bankName
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠
    const formatThaiMonth = (month: number): string => {
      const thaiMonths = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', 
                          '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.']
      return thaiMonths[month]
    }

    // ‡πÅ‡∏õ‡∏•‡∏á date range ‡πÄ‡∏õ‡πá‡∏ô text ‡πÑ‡∏ó‡∏¢
    const formatDateRangeToThai = (start: dayjs.Dayjs, end: dayjs.Dayjs): string => {
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
      const startDay = start.date()
      const startMonth = formatThaiMonth(start.month())
      const startYear = (start.year() + 543).toString().slice(-2) // ‡πÄ‡∏≠‡∏≤ 2 ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á
      
      const endDay = end.date()
      const endMonth = formatThaiMonth(end.month())
      const endYear = (end.year() + 543).toString().slice(-2)
      
      return `${startDay} ${startMonth} ${startYear} - ${endDay} ${endMonth} ${endYear}`
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
    const bankFormData = {
      bank_name: selectedBankName,
      account_number: cfrRecord.to_account_no || '',
      account_name: cfrRecord.to_account_name || '',
      // ‡∏Å‡∏£‡∏≠‡∏Å time_period ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (1 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô - 1 ‡∏ß‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á)
      time_period: formatDateRangeToThai(startDate, endDate),
      document_date: dayjs(), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      delivery_date: dayjs().add(14, 'day'), // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + 14 ‡∏ß‡∏±‡∏ô
      is_frozen: false,
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö date range
      _date_range_start: startDate,
      _date_range_end: endDate,
      // Flag ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      _is_new_from_cfr: true
    }

    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
    setEditingBank(bankFormData as any)
    setBankModalVisible(true)
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const findBankAccountSummons = (accountNo: string) => {
    if (!accountNo || !bankAccounts) return null
    
    // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞ - ‡∏≠‡∏≠‡∏Å
    const cleanAccountNo = accountNo.replace(/[\s-]/g, '')
    
    return bankAccounts.find(ba => {
      if (!ba.account_number) return false
      const cleanBankAccount = ba.account_number.replace(/[\s-]/g, '')
      return cleanBankAccount === cleanAccountNo
    })
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á bank_name ‡πÄ‡∏õ‡πá‡∏ô bank_short_name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logo
  const getBankShortName = (bankName: string): string => {
    if (!bankName) return ''
    
    const bankNameMap: { [key: string]: string } = {
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û': 'BBL',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢': 'KBANK',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢': 'KTB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï': 'TTB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå': 'SCB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤': 'BAY',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ ‡πÑ‡∏ó‡∏¢': 'CIMBT',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ã‡∏µ‡πÑ‡∏≠‡πÄ‡∏≠‡πá‡∏°‡∏ö‡∏µ‡πÑ‡∏ó‡∏¢': 'CIMBT',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏¢‡∏π‡πÇ‡∏≠‡∏ö‡∏µ': 'UOBT',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ô‡∏≤‡∏Ñ‡∏¥‡∏ô‡∏†‡∏±‡∏ó‡∏£': 'KKP',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô': 'GSB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå': 'GHB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£': 'BAAC',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏ô‡∏î‡πå ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏Æ‡πâ‡∏≤‡∏™‡πå': 'LH',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ': 'TISCO',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï': 'TCRB',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏≠‡∏ã‡∏µ‡∏ö‡∏µ‡∏ã‡∏µ (‡πÑ‡∏ó‡∏¢)': 'ICBC',
      '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢': 'IBANK'
    }
    
    // ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
    if (bankNameMap[bankName]) {
      return bankNameMap[bankName]
    }
    
    // ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    for (const [fullName, shortName] of Object.entries(bankNameMap)) {
      if (bankName.includes(fullName) || fullName.includes(bankName)) {
        return shortName
      }
    }
    
    return ''
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô
  const getVictimTransferSequence = (currentRecord: any, allRecords: any[]): number | null => {
    if (!currentRecord || !allRecords || !selected?.complainant) return null
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ record ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isCurrentVictim = isVictimAccount(currentRecord.from_account_name)
    if (!isCurrentVictim) return null
    
    // ‡∏´‡∏≤‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å
    const victimTransfers = allRecords.filter(record => {
      return isVictimAccount(record.from_account_name)
    })
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î)
    const sortedTransfers = victimTransfers.sort((a, b) => {
      const dateTimeA = `${a.transfer_date} ${a.transfer_time || '00:00:00'}`
      const dateTimeB = `${b.transfer_date} ${b.transfer_time || '00:00:00'}`
      return dateTimeA.localeCompare(dateTimeB)
    })
    
    // ‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á record ‡∏ô‡∏µ‡πâ
    const index = sortedTransfers.findIndex(t => 
      t.transfer_date === currentRecord.transfer_date &&
      t.transfer_time === currentRecord.transfer_time &&
      t.to_account_no === currentRecord.to_account_no &&
      t.transfer_amount === currentRecord.transfer_amount
    )
    
    return index >= 0 ? index + 1 : null
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isVictimAccount = (accountName: string): boolean => {
    if (!accountName || !selected?.complainant) return false
    
    const complainant = selected.complainant.trim()
    const account = accountName.trim()
    
    // ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏ô‡∏≤‡∏¢, ‡∏ô‡∏≤‡∏á, ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß, ‡∏ô.‡∏™., Mr., Mrs., Miss)
    const removeTitle = (name: string): string => {
      return name
        .replace(/^(‡∏ô‡∏≤‡∏¢|‡∏ô‡∏≤‡∏á|‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß|‡∏ô\.‡∏™\.|Mr\.|Mrs\.|Miss|Ms\.)\s*/gi, '')
        .trim()
    }
    
    const cleanComplainant = removeTitle(complainant)
    const cleanAccount = removeTitle(account)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    // 1. ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    if (cleanAccount === cleanComplainant) return true
    
    // 2. ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà/‡πÄ‡∏•‡πá‡∏Å
    if (cleanAccount.toLowerCase() === cleanComplainant.toLowerCase()) return true
    
    // 3. ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    if (cleanAccount.replace(/\s+/g, '') === cleanComplainant.replace(/\s+/g, '')) return true
    
    // 4. ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    if (cleanAccount.includes(cleanComplainant)) return true
    
    // 5. ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    if (cleanComplainant.includes(cleanAccount)) return true
    
    // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö fuzzy (‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)
    const complainantWords = cleanComplainant.split(/\s+/).filter(w => w.length > 0)
    const accountWords = cleanAccount.split(/\s+/).filter(w => w.length > 0)
    
    if (complainantWords.length >= 2 && accountWords.length >= 2) {
      const firstMatch = complainantWords[0] === accountWords[0]
      const lastMatch = complainantWords[complainantWords.length - 1] === accountWords[accountWords.length - 1]
      if (firstMatch && lastMatch) return true
    }
    
    return false
  }

  const handleCfrUpload = async (file: File) => {
    if (!selected) return false
    
    setUploadingCfr(true)
    const formData = new FormData()
    formData.append('file', file)

    try {
      const response = await api.post(`/cfr/upload/${selected.id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      })
      message.success(`${response.data.message} (‡πÄ‡∏û‡∏¥‡πà‡∏° ${response.data.records_inserted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`)
      fetchCfrFiles(selected.id)
      fetchCfrRecords(selected.id)
    } catch (error: any) {
      message.error(error.response?.data?.detail || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ')
    } finally {
      setUploadingCfr(false)
    }
    return false
  }

  const handleDeleteCfrFile = async (filename: string) => {
    if (!selected) return
    
    try {
      await api.delete(`/cfr/${selected.id}/file/${encodeURIComponent(filename)}`)
      message.success('‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå CFR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      fetchCfrFiles(selected.id)
      fetchCfrRecords(selected.id)
    } catch (error) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ')
    }
  }

  const showSuspectDetail = (suspect: Suspect) => {
    setSelectedSuspect(suspect)
    setSuspectDetailOpen(true)
  }

  const handleEdit = (record: CriminalCase) => {
    navigate(`/edit-criminal-case/${record.id}`)
  }

  const handleDelete = async (record: CriminalCase) => {
    try {
      await api.delete(`/criminal-cases/${record.id}`)
      message.success('‡∏•‡∏ö‡∏Ñ‡∏î‡∏µ‡∏≠‡∏≤‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      fetchData() // Refresh data
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏î‡∏µ‡∏≠‡∏≤‡∏ç‡∏≤‡πÑ‡∏î‡πâ')
    }
  }

  const handleAddNew = () => {
    navigate('/add-criminal-case')
  }

  // Bank Account Handlers
  const handleAddBank = () => {
    setEditingBank(null)
    setBankModalVisible(true)
  }

  const handleEditBank = (record: BankAccount) => {
    setEditingBank(record)
    setBankModalVisible(true)
  }

  const handleDeleteBank = async (bankId: number) => {
    try {
      await api.delete(`/bank-accounts/${bankId}`)
      message.success('‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      if (selected) {
        fetchCaseDetails(selected.id)
        fetchData() // Refresh counts
      }
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏î‡πâ')
    }
  }

  const handleBankModalClose = (success?: boolean) => {
    setBankModalVisible(false)
    setEditingBank(null)
    if (success && selected) {
      fetchCaseDetails(selected.id)
      fetchData() // Refresh counts
    }
  }

  // Non-Bank Handlers
  const handleAddNonBank = () => {
    setEditingNonBank(null)
    setNonBankModalVisible(true)
  }

  const handleEditNonBank = (record: NonBankAccount) => {
    setEditingNonBank(record)
    setNonBankModalVisible(true)
  }

  const handleDeleteNonBank = async (id: number) => {
    try {
      await api.delete(`/non-bank-accounts/${id}`)
      message.success('‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      if (selected) {
        fetchCaseDetails(selected.id)
        fetchData() // Refresh counts
      }
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ')
    }
  }

  const handleNonBankModalClose = (success?: boolean) => {
    setNonBankModalVisible(false)
    setEditingNonBank(null)
    if (success && selected) {
      fetchCaseDetails(selected.id)
      fetchData() // Refresh counts
    }
  }

  // Suspect Handlers
  const handleAddSuspect = () => {
    setEditingSuspect(null)
    setSuspectModalVisible(true)
  }

  const handleEditSuspect = (record: Suspect) => {
    setEditingSuspect(record)
    setSuspectModalVisible(true)
  }

  const handleDeleteSuspect = async (suspectId: number) => {
    try {
      await api.delete(`/suspects/${suspectId}`)
      message.success('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      if (selected) {
        fetchCaseDetails(selected.id)
        fetchData() // Refresh counts
      }
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏î‡πâ')
    }
  }

  const handleSuspectModalClose = (success?: boolean) => {
    setSuspectModalVisible(false)
    setEditingSuspect(null)
    if (success && selected) {
      fetchCaseDetails(selected.id)
      fetchData() // Refresh counts
    }
  }

  const handlePrintSuspectSummons = async (suspectId: number) => {
    try {
      const response = await api.get(`/documents/suspect-summons/${suspectId}`, {
        responseType: 'blob'
      })

      const blob = new Blob([response.data], { type: 'text/html; charset=utf-8' })
      const url = window.URL.createObjectURL(blob)
      const printWindow = window.open(url, '_blank')

      if (printWindow) {
        printWindow.onload = () => {
          setTimeout(() => {
            printWindow.print()
          }, 500)
        }
      }

      message.success('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤')
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏î‡πâ')
    }
  }

  const handlePrintSuspectEnvelope = async (suspectId: number) => {
    try {
      const response = await api.get(`/documents/suspect-envelope/${suspectId}`, {
        responseType: 'blob'
      })

      const blob = new Blob([response.data], { type: 'text/html; charset=utf-8' })
      const url = window.URL.createObjectURL(blob)
      const printWindow = window.open(url, '_blank')

      if (printWindow) {
        printWindow.onload = () => {
          setTimeout(() => {
            printWindow.print()
          }, 500)
        }
      }

      message.success('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤')
    } catch (err) {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏î‡πâ')
    }
  }

  const getStatusTextStyle = (status: string, complaintDate?: string) => {
    if (status === '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢') {
      return { color: 'green' }
    }
    
    if (status === '‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô' && complaintDate) {
      const complaintDateObj = new Date(complaintDate)
      const now = new Date()
      const diffTime = now.getTime() - complaintDateObj.getTime()
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      
      if (diffDays > 180) { // 6 months = ~180 days
        return { color: 'red' }
      }
    }
    
    return {}
  }

  const getRowClassName = (record: CriminalCase) => {
    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
    if (record.status === '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢') {
      return 'row-closed-case'
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏î‡∏µ‡πÄ‡∏õ‡πá‡∏ô '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô' ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô
    if (record.status === '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô' && record.complaint_date) {
      const complaintDateObj = new Date(record.complaint_date)
      const now = new Date()
      const diffTime = now.getTime() - complaintDateObj.getTime()
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      
      if (diffDays > 180) { // 6 months = ~180 days
        return 'row-red'
      }
    }
    
    return ''
  }

  const calculateCaseAge = (complaintDate?: string) => {
    if (!complaintDate) return '-'
    
    try {
      const complaintDateObj = new Date(complaintDate)
      const now = new Date()
      const diffTime = now.getTime() - complaintDateObj.getTime()
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      const months = Math.floor(diffDays / 30)
      const remainingDays = diffDays % 30
      
      if (months > 0) {
        return `${months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${remainingDays} ‡∏ß‡∏±‡∏ô`
      } else {
        return `${remainingDays} ‡∏ß‡∏±‡∏ô`
      }
    } catch {
      return '-'
    }
  }

  const calculateDaysSinceSent = (documentDate?: string) => {
    if (!documentDate) return '-'
    
    try {
      const documentDateObj = new Date(documentDate)
      const now = new Date()
      const diffTime = now.getTime() - documentDateObj.getTime()
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
      const months = Math.floor(diffDays / 30)
      const remainingDays = diffDays % 30
      
      if (months > 0) {
        return `${months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${remainingDays} ‡∏ß‡∏±‡∏ô`
      } else {
        return `${remainingDays} ‡∏ß‡∏±‡∏ô`
      }
    } catch {
      return '-'
    }
  }


  const columns: ColumnsType<CriminalCase> = [
    {
      title: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
      key: 'row_number',
      width: 80,
      render: (_, __, index) => index + 1,
      filters: [
        { text: '1-10', value: '1-10' },
        { text: '11-20', value: '11-20' },
        { text: '21-30', value: '21-30' },
        { text: '31+', value: '31+' },
      ],
      onFilter: (value: any, record: CriminalCase) => {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ index ‡∏à‡∏≤‡∏Å dataSource
        const index = data.findIndex(item => item.id === record.id)
        const num = index + 1
        switch (value) {
          case '1-10': return num >= 1 && num <= 10
          case '11-20': return num >= 11 && num <= 20
          case '21-30': return num >= 21 && num <= 30
          case '31+': return num >= 31
          default: return true
        }
      },
    },
    {
      title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏î‡∏µ',
      dataIndex: 'status',
      key: 'status',
      render: (status: string, record: CriminalCase) => {
        const textStyle = getStatusTextStyle(status, record.complaint_date)
        return <Tag color="blue" style={textStyle}>{status}</Tag>
      },
      filters: [
        { text: '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô', value: '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô' },
        { text: '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢', value: '‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢' },
      ],
      onFilter: (value: any, record: CriminalCase) => record.status === value,
    },
    {
      title: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏î‡∏µ',
      dataIndex: 'case_number',
      key: 'case_number',
      render: (_, record: CriminalCase) => (
        <Button type="link" onClick={() => showDetails(record)}>
          {record.case_number}
        </Button>
      ),
      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
        <div style={{ padding: 8 }}>
          <Input
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏î‡∏µ"
            value={selectedKeys[0]}
            onChange={(e: any) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
            onPressEnter={() => confirm()}
            style={{ width: 188, marginBottom: 8, display: 'block' }}
          />
          <Space>
            <Button
              type="primary"
              onClick={() => confirm()}
              size="small"
              style={{ width: 90 }}
            >
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </Button>
            <Button onClick={() => clearFilters && clearFilters()} size="small" style={{ width: 90 }}>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
          </Space>
        </div>
      ),
      onFilter: (value: any, record: CriminalCase) =>
        record.case_number?.toLowerCase().includes((value as string).toLowerCase()) || false,
    },
    {
      title: 'CaseID',
      dataIndex: 'case_id',
      key: 'case_id',
      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
        <div style={{ padding: 8 }}>
          <Input
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ CaseID"
            value={selectedKeys[0]}
            onChange={(e: any) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
            onPressEnter={() => confirm()}
            style={{ width: 188, marginBottom: 8, display: 'block' }}
          />
          <Space>
            <Button
              type="primary"
              onClick={() => confirm()}
              size="small"
              style={{ width: 90 }}
            >
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </Button>
            <Button onClick={() => clearFilters && clearFilters()} size="small" style={{ width: 90 }}>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
          </Space>
        </div>
      ),
      onFilter: (value: any, record: CriminalCase) =>
        record.case_id?.toLowerCase().includes((value as string).toLowerCase()) || false,
    },
    {
      title: '‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå',
      dataIndex: 'complainant',
      key: 'complainant',
      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
        <div style={{ padding: 8 }}>
          <Input
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå"
            value={selectedKeys[0]}
            onChange={(e: any) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
            onPressEnter={() => confirm()}
            style={{ width: 188, marginBottom: 8, display: 'block' }}
          />
          <Space>
            <Button
              type="primary"
              onClick={() => confirm()}
              size="small"
              style={{ width: 90 }}
            >
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </Button>
            <Button onClick={() => clearFilters && clearFilters()} size="small" style={{ width: 90 }}>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
          </Space>
        </div>
      ),
      onFilter: (value: any, record: CriminalCase) =>
        record.complainant?.toLowerCase().includes((value as string).toLowerCase()) || false,
    },
    {
      title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå',
      dataIndex: 'complaint_date',
      key: 'complaint_date',
      render: (date: string) => formatThaiDate(date),
      sorter: (a, b) => {
        if (!a.complaint_date && !b.complaint_date) return 0
        if (!a.complaint_date) return 1
        if (!b.complaint_date) return -1
        return new Date(a.complaint_date).getTime() - new Date(b.complaint_date).getTime()
      },
      defaultSortOrder: 'descend',
    },
    {
      title: '‡πÄ‡∏Ç‡∏ï‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏®‡∏≤‡∏•',
      dataIndex: 'court_name',
      key: 'court_name',
      render: (courtName: string) => courtName || '-',
      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
        <div style={{ padding: 8 }}>
          <Input
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Ç‡∏ï‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏®‡∏≤‡∏•"
            value={selectedKeys[0]}
            onChange={(e: any) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
            onPressEnter={() => confirm()}
            style={{ width: 188, marginBottom: 8, display: 'block' }}
          />
          <Space>
            <Button
              type="primary"
              onClick={() => confirm()}
              size="small"
              style={{ width: 90 }}
            >
              ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            </Button>
            <Button onClick={() => clearFilters && clearFilters()} size="small" style={{ width: 90 }}>
              ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
            </Button>
          </Space>
        </div>
      ),
      onFilter: (value: any, record: CriminalCase) =>
        (record.court_name || '').toLowerCase().includes((value as string).toLowerCase()),
    },
    {
      title: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏î‡∏µ',
      dataIndex: 'complaint_date',
      key: 'case_age',
      render: (date: string) => calculateCaseAge(date),
      filters: [
        { text: '0-30 ‡∏ß‡∏±‡∏ô', value: '0-30' },
        { text: '31-90 ‡∏ß‡∏±‡∏ô', value: '31-90' },
        { text: '91-180 ‡∏ß‡∏±‡∏ô', value: '91-180' },
        { text: '181-365 ‡∏ß‡∏±‡∏ô', value: '181-365' },
        { text: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏õ‡∏µ', value: '365+' },
      ],
      onFilter: (value: any, record: CriminalCase) => {
        if (!record.complaint_date) return false
        const complaintDate = new Date(record.complaint_date)
        const now = new Date()
        const diffTime = Math.abs(now.getTime() - complaintDate.getTime())
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
        
        switch (value) {
          case '0-30': return diffDays <= 30
          case '31-90': return diffDays >= 31 && diffDays <= 90
          case '91-180': return diffDays >= 91 && diffDays <= 180
          case '181-365': return diffDays >= 181 && diffDays <= 365
          case '365+': return diffDays > 365
          default: return true
        }
      },
    },
    {
      title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
      dataIndex: 'bank_accounts_count',
      key: 'bank_accounts_count',
      filters: [
        { text: '0 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', value: '0' },
        { text: '1-5 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', value: '1-5' },
        { text: '6-10 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', value: '6-10' },
        { text: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ', value: '10+' },
      ],
      onFilter: (value: any, record: CriminalCase) => {
        const count = parseInt(record.bank_accounts_count || '0')
        switch (value) {
          case '0': return count === 0
          case '1-5': return count >= 1 && count <= 5
          case '6-10': return count >= 6 && count <= 10
          case '10+': return count > 10
          default: return true
        }
      },
    },
    {
      title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á',
      dataIndex: 'suspects_count',
      key: 'suspects_count',
      filters: [
        { text: '0 ‡∏Ñ‡∏ô', value: '0' },
        { text: '1-3 ‡∏Ñ‡∏ô', value: '1-3' },
        { text: '4-6 ‡∏Ñ‡∏ô', value: '4-6' },
        { text: '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏Ñ‡∏ô', value: '6+' },
      ],
      onFilter: (value: any, record: CriminalCase) => {
        const count = parseInt(record.suspects_count || '0')
        switch (value) {
          case '0': return count === 0
          case '1-3': return count >= 1 && count <= 3
          case '4-6': return count >= 4 && count <= 6
          case '6+': return count > 6
          default: return true
        }
      },
    },
    {
      title: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
      key: 'actions',
      render: (_, record: CriminalCase) => (
        <Space>
          <Button
            type="text"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          />
          <Popconfirm
            title="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ñ‡∏î‡∏µ‡∏ô‡∏µ‡πâ?"
            onConfirm={() => handleDelete(record)}
            okText="‡πÉ‡∏ä‡πà"
            cancelText="‡πÑ‡∏°‡πà"
          >
            <Button
              type="text"
              danger
              icon={<DeleteOutlined />}
            />
          </Popconfirm>
        </Space>
      ),
    },
  ]

  if (!token || !user) {
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...</p>
      </div>
    )
  }

  return (
    <div style={{ padding: '20px' }}>
      {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
      <div style={{ marginBottom: '20px' }}>
        <div style={{ marginBottom: '16px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div>
            <h1 style={{ margin: 0 }}>‡∏Ñ‡∏î‡∏µ‡∏≠‡∏≤‡∏ç‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</h1>
            {user && (
              <div style={{ marginTop: '8px', fontSize: '14px', color: '#666' }}>
                <span style={{ fontWeight: '500' }}>
                  {user.rank?.rank_short} {user.full_name}
                </span>
                {user.position && (
                  <span style={{ marginLeft: '8px', color: '#999' }}>
                    ({user.position})
                  </span>
                )}
              </div>
            )}
          </div>
          <Button type="primary" icon={<PlusOutlined />} onClick={handleAddNew}>
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏î‡∏µ‡πÉ‡∏´‡∏°‡πà
          </Button>
        </div>
        
        {/* ‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ */}
        <div style={{ 
          padding: '12px 16px', 
          backgroundColor: '#f0f8ff', 
          border: '1px solid #d9d9d9', 
          borderRadius: '6px',
          fontSize: '14px',
          fontWeight: '500',
          color: '#1890ff'
        }}>
          <span style={{ marginRight: '20px' }}>
            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏î‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <strong>{stats.totalCases}</strong>
          </span>
          <span style={{ marginRight: '20px' }}>
            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: <strong style={{ color: '#52c41a' }}>{stats.processingCases}</strong>
          </span>
          <span style={{ marginRight: '20px' }}>
            ‡πÄ‡∏Å‡∏¥‡∏ô 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: <strong style={{ color: '#fa8c16' }}>{stats.over6MonthsCases}</strong>
          </span>
          <span>
            ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: <strong style={{ color: '#722ed1' }}>{stats.closedCases}</strong>
          </span>
        </div>
      </div>

      <Table
        columns={columns}
        dataSource={data}
        loading={loading}
        rowKey="id"
        rowClassName={getRowClassName}
        pagination={{
          pageSize: 20,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total, range) => `${range[0]}-${range[1]} ‡∏à‡∏≤‡∏Å ${total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        }}
      />

      <Drawer
        title={
          `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏î‡∏µ ${selected?.case_number || ''}${selected?.case_id ? ` | CaseID: ${selected.case_id}` : ''} ${
            selected?.complainant
              ? `(${selected.complainant.replace(/^\d+\)\s*/, '')})`
              : ''
          }`
        }
        placement="right"
        width="70%"
        onClose={() => setOpen(false)}
        open={open}
      >
        {selected && (
          <Tabs defaultActiveKey="general">
            <Tabs.TabPane tab="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ" key="general">
              <Descriptions column={2} bordered>
                <Descriptions.Item label="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏î‡∏µ">{selected.case_number || '-'}</Descriptions.Item>
                <Descriptions.Item label="CaseID">{selected.case_id || '-'}</Descriptions.Item>
                <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏î‡∏µ">{selected.status}</Descriptions.Item>
                <Descriptions.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏î‡∏µ">{selected.case_type || '-'}</Descriptions.Item>
                <Descriptions.Item label="‡∏ú‡∏π‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå">{selected.complainant}</Descriptions.Item>
                <Descriptions.Item label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤ ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ç‡πå">
                  {selected.complaint_date_thai || '-'}
                </Descriptions.Item>
                <Descriptions.Item label="‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏î‡∏µ">
                  {calculateCaseAge(selected.complaint_date)}
                </Descriptions.Item>
                <Descriptions.Item label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢">
                  {selected.damage_amount || '-'}
                </Descriptions.Item>
                <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏">
                  -
                </Descriptions.Item>
              </Descriptions>
            </Tabs.TabPane>

            <Tabs.TabPane tab={<span><FileExcelOutlined /> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFR ({cfrFiles.length})</span>} key="cfr">
              <Card>
                <Space direction="vertical" style={{ width: '100%' }} size="large">
                  <div>
                    <h3>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CFR (Central Fraud Registry)</h3>
                    <p style={{ color: '#666' }}>
                      ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (.xlsx) ‡∏à‡∏≤‡∏Å CFR System
                      <br />
                      ‡∏´‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô
                    </p>
                  </div>
                  <Upload
                    accept=".xlsx"
                    beforeUpload={handleCfrUpload}
                    showUploadList={false}
                    disabled={uploadingCfr}
                  >
                    <Button 
                      type="primary" 
                      icon={<UploadOutlined />}
                      loading={uploadingCfr}
                    >
                      {uploadingCfr ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CFR'}
                    </Button>
                  </Upload>

                  <div>
                    <h4>‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</h4>
                    {cfrFiles.length === 0 ? (
                      <p style={{ color: '#999' }}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå CFR</p>
                    ) : (
                      <List
                        bordered
                        dataSource={cfrFiles}
                        renderItem={(item: any) => (
                          <List.Item
                            actions={[
                              <Popconfirm
                                title="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ?"
                                description={`‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${item.record_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`}
                                onConfirm={() => handleDeleteCfrFile(item.filename)}
                                okText="‡πÉ‡∏ä‡πà"
                                cancelText="‡πÑ‡∏°‡πà"
                              >
                                <Button type="link" danger icon={<DeleteOutlined />}>
                                  ‡∏•‡∏ö
                                </Button>
                              </Popconfirm>
                            ]}
                          >
                            <List.Item.Meta
                              avatar={<FileExcelOutlined style={{ fontSize: 24, color: '#52c41a' }} />}
                              title={item.filename}
                              description={
                                <Space direction="vertical" size={0}>
                                  <span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {item.record_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                                  <span>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {new Date(item.last_upload).toLocaleString('th-TH')}</span>
                                </Space>
                              }
                            />
                          </List.Item>
                        )}
                      />
                    )}
                  </div>

                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFR ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á 1 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πà‡∏≠ 1 bank_case_id */}
                  <div style={{ marginTop: 32 }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
                      <h3 style={{ margin: 0 }}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</h3>
                      {cfrRecords.length > 0 && (
                        <Button 
                          type="primary"
                          icon={<ApartmentOutlined />}
                          onClick={() => setFlowChartVisible(true)}
                        >
                          ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
                        </Button>
                      )}
                    </div>
                    {loadingCfr ? (
                      <Spin />
                    ) : cfrRecords.length === 0 ? (
                      <p style={{ color: '#999' }}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFR</p>
                    ) : (
                      <>
                        {/* ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° bank_case_id */}
                        {Array.from(new Set(cfrRecords.map(r => r.bank_case_id))).map((bankCaseId) => {
                          const records = cfrRecords
                            .filter(r => r.bank_case_id === bankCaseId)
                            .sort((a, b) => {
                              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° transfer_date ‡∏Å‡πà‡∏≠‡∏ô
                              const dateCompare = (a.transfer_date || '').localeCompare(b.transfer_date || '')
                              if (dateCompare !== 0) return dateCompare
                              // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° transfer_time
                              return (a.transfer_time || '').localeCompare(b.transfer_time || '')
                            })
                          return (
                            <Card 
                              key={bankCaseId} 
                              style={{ marginBottom: 16 }}
                              title={`Bank Case ID: ${bankCaseId} (${records.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`}
                              size="small"
                            >
                              <Table
                                dataSource={records}
                                rowKey="id"
                                size="small"
                                pagination={{ pageSize: 10 }}
                                scroll={{ x: 900 }}
                                columns={[
                                  {
                                    title: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
                                    key: 'from_account',
                                    width: 250,
                                    render: (_, record) => {
                                      const isVictim = isVictimAccount(record.from_account_name)
                                      const summons = findBankAccountSummons(record.from_account_no)
                                      const shortName = record.from_bank_short_name
                                      const logoUrl = shortName ? `/Bank-icons/${shortName}.png` : ''
                                      
                                      return (
                                        <div
                                          style={{
                                            position: 'relative',
                                            padding: '12px 16px',
                                            minHeight: '60px',
                                            overflow: 'hidden',
                                          }}
                                        >
                                          {logoUrl && (
                                            <div
                                              style={{
                                                position: 'absolute',
                                                top: '50%',
                                                left: '50%',
                                                transform: 'translate(-50%, -50%)',
                                                width: '100%',
                                                height: '100%',
                                                backgroundImage: `url(${logoUrl})`,
                                                backgroundSize: 'cover',
                                                backgroundRepeat: 'no-repeat',
                                                backgroundPosition: 'center',
                                                opacity: 0.05,
                                                zIndex: 0,
                                              }}
                                            />
                                          )}
                                          <div style={{ position: 'relative', zIndex: 1 }}>
                                            <div>
                                              <strong>{record.from_bank_short_name || '-'}</strong>
                                              {isVictim && (
                                                <Tag color="green" style={{ marginLeft: 4, fontSize: '10px' }}>
                                                  ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
                                                </Tag>
                                              )}
                                              {summons && (
                                                <Tag color="purple" style={{ marginLeft: 4, fontSize: '10px' }}>
                                                  ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                                                </Tag>
                                              )}
                                            </div>
                                            <div>{record.from_account_no || '-'}</div>
                                            <div style={{ color: '#666', fontSize: '11px' }}>
                                              {record.from_account_name || '-'}
                                            </div>
                                            {summons && (
                                              <div style={{ fontSize: '10px', color: '#722ed1', marginTop: 2 }}>
                                                {summons.reply_status ? '‚úì ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß' : `‚úó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${calculateDaysSinceSent(summons.document_date)})`}
                                              </div>
                                            )}
                                          </div>
                                        </div>
                                      )
                                    },
                                  },
                                  {
                                    title: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
                                    key: 'to_account',
                                    width: 250,
                                    render: (_, record) => {
                                      const isVictim = isVictimAccount(record.to_account_name)
                                      const summons = findBankAccountSummons(record.to_account_no)
                                      const shortName = record.to_bank_short_name
                                      const logoUrl = shortName ? `/Bank-icons/${shortName}.png` : ''
                                      
                                      return (
                                        <div
                                          style={{
                                            position: 'relative',
                                            padding: '12px 16px',
                                            minHeight: '60px',
                                            overflow: 'hidden',
                                            width: '100%',
                                            cursor: 'pointer',
                                          }}
                                          onClick={() => showCfrAccountDetail(record)}
                                        >
                                          {logoUrl && (
                                            <div
                                              style={{
                                                position: 'absolute',
                                                top: '50%',
                                                left: '50%',
                                                transform: 'translate(-50%, -50%)',
                                                width: '100%',
                                                height: '100%',
                                                backgroundImage: `url(${logoUrl})`,
                                                backgroundSize: 'cover',
                                                backgroundRepeat: 'no-repeat',
                                                backgroundPosition: 'center',
                                                opacity: 0.05,
                                                zIndex: 0,
                                              }}
                                            />
                                          )}
                                          <div style={{ position: 'relative', zIndex: 1 }}>
                                            <div>
                                              <strong style={{ color: '#1890ff' }}>{record.to_bank_short_name || '-'}</strong>
                                              {isVictim && (
                                                <Tag color="green" style={{ marginLeft: 4, fontSize: '10px' }}>
                                                  ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
                                                </Tag>
                                              )}
                                              {summons && (
                                                <Tag color="purple" style={{ marginLeft: 4, fontSize: '10px' }}>
                                                  ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                                                </Tag>
                                              )}
                                            </div>
                                            <div style={{ color: '#1890ff', textDecoration: 'underline' }}>{record.to_account_no || '-'}</div>
                                            <div style={{ color: '#666', fontSize: '11px' }}>
                                              {record.to_account_name || '-'}
                                            </div>
                                            {summons && (
                                              <div style={{ fontSize: '10px', color: '#722ed1', marginTop: 2 }}>
                                                {summons.reply_status ? '‚úì ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß' : `‚úó ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${calculateDaysSinceSent(summons.document_date)})`}
                                              </div>
                                            )}
                                            {!summons && !isVictim && (
                                              <Button 
                                                type="primary" 
                                                size="small" 
                                                style={{ marginTop: 4, fontSize: '10px', height: '20px' }}
                                                onClick={(e) => {
                                                  e.stopPropagation()
                                                  handleCreateSummonsFromCfr(record)
                                                }}
                                              >
                                                ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                                              </Button>
                                            )}
                                          </div>
                                        </div>
                                      )
                                    },
                                  },
                                  {
                                    title: '‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô',
                                    key: 'transfer_datetime',
                                    width: 150,
                                    render: (_, record) => (
                                      <div>
                                        <div>{record.transfer_date || '-'}</div>
                                        <div style={{ color: '#666', fontSize: '11px' }}>
                                          {record.transfer_time || '-'}
                                        </div>
                                      </div>
                                    ),
                                  },
                                  {
                                    title: '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô',
                                    dataIndex: 'transfer_amount',
                                    key: 'transfer_amount',
                                    width: 150,
                                    align: 'right',
                                    render: (amount) => amount ? Number(amount).toLocaleString('th-TH', {
                                      minimumFractionDigits: 2,
                                      maximumFractionDigits: 2
                                    }) + ' ‡∏ø' : '-',
                                  },
                                  {
                                    title: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
                                    key: 'note',
                                    width: 180,
                                    render: (_, record) => {
                                      const sequence = getVictimTransferSequence(record, records)
                                      if (sequence) {
                                        return (
                                          <Tag color="orange" style={{ fontSize: '11px', fontWeight: 'bold' }}>
                                            ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {sequence}
                                          </Tag>
                                        )
                                      }
                                      return '-'
                                    },
                                  },
                                ]}
                              />
                            </Card>
                          )
                        })}
                      </>
                    )}
                  </div>
                </Space>
              </Card>
            </Tabs.TabPane>

            <Tabs.TabPane tab={`‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (${bankAccounts.length})`} key="bank-accounts">
              <Space style={{ marginBottom: 16 }}>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={handleAddBank}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
                </Button>
              </Space>
              <Table
                dataSource={bankAccounts}
                loading={loadingDetails}
                rowKey="id"
                size="small"
                rowClassName={(record) => record.reply_status ? 'row-green' : ''}
                columns={[
                  {
                    title: '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                    dataIndex: 'document_number',
                    key: 'document_number',
                    render: (value) => value || '-',
                  },
                  {
                    title: '‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                    dataIndex: 'document_date',
                    key: 'document_date',
                    render: (date) => formatThaiDate(date),
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
                    dataIndex: 'bank_name',
                    key: 'bank_name',
                    width: 250,
                    render: (bankName: string) => {
                      const shortName = getBankShortName(bankName)
                      const logoUrl = shortName ? `/Bank-icons/${shortName}.png` : ''
                      
                      return (
                        <div
                          style={{
                            position: 'relative',
                            padding: '12px 16px',
                            minHeight: '60px',
                            display: 'flex',
                            alignItems: 'center',
                            overflow: 'hidden',
                          }}
                        >
                          {logoUrl && (
                            <div
                              style={{
                                position: 'absolute',
                                top: '50%',
                                left: '50%',
                                transform: 'translate(-50%, -50%)',
                                width: '100%',
                                height: '100%',
                                backgroundImage: `url(${logoUrl})`,
                                backgroundSize: 'cover',
                                backgroundRepeat: 'no-repeat',
                                backgroundPosition: 'center',
                                opacity: 0.05,
                                zIndex: 0,
                              }}
                            />
                          )}
                          <span
                            style={{
                              position: 'relative',
                              zIndex: 1,
                              fontWeight: 600,
                              fontSize: '14px',
                              color: '#000',
                              textShadow: '0 0 4px white, 0 0 4px white, 0 0 4px white',
                              width: '100%',
                            }}
                          >
                            {bankName || '-'}
                          </span>
                        </div>
                      )
                    },
                  },
                  {
                    title: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                    dataIndex: 'account_number',
                    key: 'account_number',
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                    dataIndex: 'account_name',
                    key: 'account_name',
                  },
                  {
                    title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö',
                    dataIndex: 'reply_status',
                    key: 'reply_status',
                    render: (reply_status: boolean, record: BankAccount) => {
                      if (reply_status) {
                        return <Tag color="green">‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</Tag>
                      } else {
                        const daysSince = calculateDaysSinceSent(record.document_date)
                        return (
                          <div>
                            <Tag color="red">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</Tag>
                            <br />
                            <small>‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {daysSince}</small>
                          </div>
                        )
                      }
                    },
                  },
                  {
                    title: '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                    key: 'action',
                    render: (_, record) => (
                      <Space size="small" direction="vertical">
                        <Space size="small">
                          <Button
                            type="link"
                            size="small"
                            icon={<EditOutlined />}
                            onClick={() => handleEditBank(record)}
                          >
                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </Button>
                          <Popconfirm
                            title="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ?"
                            onConfirm={() => handleDeleteBank(record.id)}
                            okText="‡πÉ‡∏ä‡πà"
                            cancelText="‡πÑ‡∏°‡πà"
                          >
                            <Button type="link" size="small" danger icon={<DeleteOutlined />}>
                              ‡∏•‡∏ö
                            </Button>
                          </Popconfirm>
                        </Space>
                        <Button
                          type="primary"
                          size="small"
                          icon={<PrinterOutlined />}
                          onClick={() => {
                            // ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            Modal.confirm({
                              title: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å',
                              content: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                              okText: '‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                              cancelText: '‡πÑ‡∏°‡πà‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                              onOk: async () => {
                                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                                try {
                                  const response = await api.get(`/documents/bank-summons/${record.id}`, {
                                    params: { freeze_account: true },
                                    responseType: 'blob'
                                  })
                                  const blob = new Blob([response.data], { type: 'text/html; charset=utf-8' })
                                  const url = window.URL.createObjectURL(blob)
                                  const printWindow = window.open(url, '_blank')
                                  if (printWindow) {
                                    printWindow.onload = () => {
                                      setTimeout(() => printWindow.print(), 500)
                                    }
                                  }
                                  message.success('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å (‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)')
                                } catch (err) {
                                  message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ')
                                }
                              },
                              onCancel: async () => {
                                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                                try {
                                  const response = await api.get(`/documents/bank-summons/${record.id}`, {
                                    params: { freeze_account: false },
                                    responseType: 'blob'
                                  })
                                  const blob = new Blob([response.data], { type: 'text/html; charset=utf-8' })
                                  const url = window.URL.createObjectURL(blob)
                                  const printWindow = window.open(url, '_blank')
                                  if (printWindow) {
                                    printWindow.onload = () => {
                                      setTimeout(() => printWindow.print(), 500)
                                    }
                                  }
                                  message.success('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å (‡πÑ‡∏°‡πà‡∏≠‡∏≤‡∏¢‡∏±‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)')
                                } catch (err) {
                                  message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ')
                                }
                              }
                            })
                          }}
                          block
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                        <Button
                          size="small"
                          icon={<PrinterOutlined />}
                          onClick={async () => {
                            try {
                              const response = await api.get(`/documents/bank-envelope/${record.id}`, {
                                responseType: 'blob'
                              })
                              const blob = new Blob([response.data], { type: 'text/html; charset=utf-8' })
                              const url = window.URL.createObjectURL(blob)
                              const printWindow = window.open(url, '_blank')
                              if (printWindow) {
                                printWindow.onload = () => {
                                  setTimeout(() => printWindow.print(), 500)
                                }
                              }
                              message.success('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å')
                            } catch (err) {
                              message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ')
                            }
                          }}
                          block
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                      </Space>
                    ),
                  },
                ]}
                pagination={false}
              />
            </Tabs.TabPane>

            <Tabs.TabPane tab={`Non-Bank (${nonBankAccounts.length})`} key="non-bank-accounts">
              <Space style={{ marginBottom: 16 }}>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={handleAddNonBank}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
                </Button>
              </Space>
              <Table
                dataSource={nonBankAccounts}
                loading={loadingDetails}
                rowKey="id"
                size="small"
                rowClassName={(record) => record.reply_status ? 'row-green' : ''}
                columns={[
                  {
                    title: '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                    dataIndex: 'document_number',
                    key: 'document_number',
                    render: (value) => value || '-',
                  },
                  {
                    title: '‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                    dataIndex: 'document_date',
                    key: 'document_date',
                    render: (date) => formatThaiDate(date),
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                    dataIndex: 'provider_name',
                    key: 'provider_name',
                    width: 250,
                    render: (providerName: string) => {
                      return (
                        <div
                          style={{
                            position: 'relative',
                            padding: '12px 16px',
                            minHeight: '60px',
                            display: 'flex',
                            alignItems: 'center',
                            overflow: 'hidden',
                          }}
                        >
                          <span
                            style={{
                              position: 'relative',
                              zIndex: 1,
                              fontWeight: 600,
                              fontSize: '14px',
                              color: '#000',
                              width: '100%',
                            }}
                          >
                            {providerName || '-'}
                          </span>
                        </div>
                      )
                    },
                  },
                  {
                    title: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                    dataIndex: 'account_number',
                    key: 'account_number',
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                    dataIndex: 'account_name',
                    key: 'account_name',
                  },
                  {
                    title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö',
                    dataIndex: 'reply_status',
                    key: 'reply_status',
                    render: (reply_status: boolean, record: NonBankAccount) => {
                      if (reply_status) {
                        return <Tag color="green">‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</Tag>
                      } else {
                        const daysSince = calculateDaysSinceSent(record.document_date)
                        return (
                          <div>
                            <Tag color="red">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</Tag>
                            <br />
                            <small>‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {daysSince}</small>
                          </div>
                        )
                      }
                    },
                  },
                  {
                    title: '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
                    key: 'action',
                    width: 200,
                    render: (_, record) => (
                      <Space>
                        <Button
                          icon={<EditOutlined />}
                          size="small"
                          onClick={() => handleEditNonBank(record)}
                        >
                          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </Button>
                        <Popconfirm
                          title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£?"
                          onConfirm={() => handleDeleteNonBank(record.id)}
                          okText="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
                          cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                        >
                          <Button danger icon={<DeleteOutlined />} size="small">
                            ‡∏•‡∏ö
                          </Button>
                        </Popconfirm>
                        <Button
                          icon={<PrinterOutlined />}
                          size="small"
                          onClick={() => window.open(`/api/v1/documents/non-bank-summons/${record.id}`, '_blank')}
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                        <Button
                          icon={<PrinterOutlined />}
                          size="small"
                          onClick={() => window.open(`/api/v1/documents/non-bank-envelope/${record.id}`, '_blank')}
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                      </Space>
                    ),
                  },
                ]}
                pagination={false}
              />
            </Tabs.TabPane>

            <Tabs.TabPane tab={`‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (${suspects.length})`} key="suspects">
              <Space style={{ marginBottom: 16 }}>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={handleAddSuspect}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤
                </Button>
              </Space>
              <Table
                dataSource={suspects}
                loading={loadingDetails}
                rowKey="id"
                size="small"
                rowClassName={(record) => record.reply_status ? 'row-green' : ''}
                columns={[
                  {
                    title: '‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
                    dataIndex: 'document_number',
                    key: 'document_number',
                    render: (value) => value || '-',
                  },
                  {
                    title: '‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                    dataIndex: 'document_date',
                    key: 'document_date',
                    render: (date) => formatThaiDate(date),
                  },
                  {
                    title: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤',
                    dataIndex: 'suspect_name',
                    key: 'suspect_name',
                    render: (name: string, record: Suspect) => (
                      <Button type="link" onClick={() => showSuspectDetail(record)}>
                        {name}
                      </Button>
                    ),
                  },
                  {
                    title: '‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
                    dataIndex: 'suspect_id_card',
                    key: 'suspect_id_card',
                  },
                  {
                    title: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤',
                    dataIndex: 'suspect_address',
                    key: 'suspect_address',
                  },
                  {
                    title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö',
                    dataIndex: 'reply_status',
                    key: 'reply_status',
                    width: 130,
                    render: (reply_status: boolean, record: Suspect) => {
                      if (reply_status) {
                        return <Tag color="green">‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</Tag>
                      } else {
                        const daysSince = calculateDaysSinceSent(record.document_date)
                        return (
                          <div>
                            <Tag color="red">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</Tag>
                            <br />
                            <small>‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß {daysSince}</small>
                          </div>
                        )
                      }
                    },
                  },
                  {
                    title: '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                    key: 'action',
                    width: 250,
                    render: (_, record) => (
                      <Space size="small" direction="vertical">
                        <Space size="small">
                          <Button
                            type="link"
                            icon={<EditOutlined />}
                            onClick={() => handleEditSuspect(record)}
                          >
                            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                          </Button>
                          <Popconfirm
                            title="‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏ô‡∏µ‡πâ?"
                            onConfirm={() => handleDeleteSuspect(record.id)}
                            okText="‡πÉ‡∏ä‡πà"
                            cancelText="‡πÑ‡∏°‡πà"
                          >
                            <Button type="link" danger icon={<DeleteOutlined />}>
                              ‡∏•‡∏ö
                            </Button>
                          </Popconfirm>
                        </Space>
                        <Button
                          type="primary"
                          size="small"
                          icon={<PrinterOutlined />}
                          onClick={() => handlePrintSuspectSummons(record.id)}
                          block
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                        <Button
                          size="small"
                          icon={<PrinterOutlined />}
                          onClick={() => handlePrintSuspectEnvelope(record.id)}
                          block
                        >
                          ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ã‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
                        </Button>
                      </Space>
                    ),
                  },
                ]}
                pagination={false}
              />
            </Tabs.TabPane>
          </Tabs>
        )}
      </Drawer>

      <Modal
        title={`‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ - ${selectedSuspect?.suspect_name || ''}`}
        open={suspectDetailOpen}
        onCancel={() => setSuspectDetailOpen(false)}
        footer={[
          <Button key="close" onClick={() => setSuspectDetailOpen(false)}>
            ‡∏õ‡∏¥‡∏î
          </Button>
        ]}
        width={700}
      >
        {selectedSuspect && (
          <Descriptions column={1} bordered>
            <Descriptions.Item label="‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠">
              {selectedSuspect.document_number || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà">
              {selectedSuspect.document_date_thai || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤">
              {selectedSuspect.suspect_name}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô">
              {selectedSuspect.suspect_id_card || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤">
              {selectedSuspect.suspect_address || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏û‡∏ö">
              {selectedSuspect.appointment_date_thai || selectedSuspect.appointment_date || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à">
              {selectedSuspect.police_station || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î">
              {selectedSuspect.police_province || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à">
              {selectedSuspect.police_address || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö">
              {selectedSuspect.reply_status ? (
                <Tag color="green">‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß</Tag>
              ) : (
                <Tag color="red">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</Tag>
              )}
            </Descriptions.Item>
          </Descriptions>
        )}
      </Modal>

      <Modal
        title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"
        open={cfrDetailVisible}
        onCancel={() => setCfrDetailVisible(false)}
        footer={[
          <Button key="close" onClick={() => setCfrDetailVisible(false)}>
            ‡∏õ‡∏¥‡∏î
          </Button>
        ]}
        width={600}
      >
        {selectedCfrAccount && (
          <Descriptions column={1} bordered>
            <Descriptions.Item label="‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£">
              {selectedCfrAccount.to_bank_short_name || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
              {selectedCfrAccount.to_account_no || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
              {selectedCfrAccount.to_account_name || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£ (to_id_type)">
              {selectedCfrAccount.to_id_type || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£ (to_id)">
              {selectedCfrAccount.to_id || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•">
              {selectedCfrAccount.first_name && selectedCfrAccount.last_name 
                ? `${selectedCfrAccount.first_name} ${selectedCfrAccount.last_name}`
                : '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (phone_number)">
              {selectedCfrAccount.phone_number || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó PromptPay (promptpay_type)">
              {selectedCfrAccount.promptpay_type || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏£‡∏´‡∏±‡∏™ PromptPay (promptpay_id)">
              {selectedCfrAccount.promptpay_id || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
              {selectedCfrAccount.to_account_status || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
              {selectedCfrAccount.to_open_date || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏ß‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">
              {selectedCfrAccount.to_close_date || '-'}
            </Descriptions.Item>
            <Descriptions.Item label="‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠">
              {selectedCfrAccount.to_balance 
                ? Number(selectedCfrAccount.to_balance).toLocaleString('th-TH', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                  }) + ' ‡∏ø'
                : '-'}
            </Descriptions.Item>
          </Descriptions>
        )}
      </Modal>

      <Modal
        title={`‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô - ${selected?.case_number || ''}`}
        open={flowChartVisible}
        onCancel={() => setFlowChartVisible(false)}
        footer={null}
        width="90%"
        style={{ top: 20 }}
      >
        <CfrFlowChart 
          records={cfrRecords}
          victimName={selected?.complainant}
        />
      </Modal>

      <BankAccountFormModal
        visible={bankModalVisible}
        criminalCaseId={selected?.id || 0}
        editingRecord={editingBank}
        onClose={handleBankModalClose}
      />

      <NonBankAccountFormModal
        visible={nonBankModalVisible}
        criminalCaseId={selected?.id || 0}
        editingRecord={editingNonBank}
        onClose={handleNonBankModalClose}
      />

      <SuspectFormModal
        visible={suspectModalVisible}
        criminalCaseId={selected?.id || 0}
        editingRecord={editingSuspect}
        onClose={handleSuspectModalClose}
      />

      <style>{`
        .row-red {
          background-color: #fff2f0 !important;
        }
        .row-green {
          background-color: #f6ffed !important;
        }
        .row-closed-case {
          background-color: #f6ffed !important;
        }
      `}</style>
    </div>
  )
}